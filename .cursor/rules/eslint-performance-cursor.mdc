---
description: ESLint fixes, bundle optimization, performance improvement, code splitting. Triggers: eslint, performance, bundle, React.lazy, webpack, optimization, lint.
globs: 
alwaysApply: false
---
# 📊 MMM Checklist - ESLint & Performance Kuralları

## 🎯 ESLint Tarama Sonuçları (2025-02-06)

### 🚀 PersonnelTracking.js Refactoring Performance Success
- **File Size Optimization**: 2025 → 221 lines (89% reduction)
- **Bundle Size Achievement**: 543.59KB gzipped < 600KB target ✅
- **Component Extraction**: 4 modular components <200 lines each
- **ESLint Compliance**: 100% clean (0 errors, 0 warnings)

#### Large File Refactoring Patterns
```javascript
// ✅ Component Extraction Strategy
// BEFORE: PersonnelTracking.js (2025 lines, 72.8KB)
// AFTER: PersonnelTracking.js (221 lines, 5.94KB) + 4 components

// ✅ Modular Component Structure
frontend/src/components/PersonnelTracking/components/PersonnelViews/
├── MachinePersonnelView.js      (137 lines) ✅ <200 target
├── DepartmentPersonnelView.js   (178 lines) ✅ <200 target  
├── RolePersonnelView.js         (146 lines) ✅ <200 target
├── AllPersonnelView.js          (137 lines) ✅ <200 target
└── index.js                     (16 lines)

// ✅ Import Optimization
// BEFORE: Local component definitions (1800+ lines)
const MachinePersonnelView = ({ data, loading }) => {
  // 400+ lines of JSX and logic
};

// AFTER: Clean modular imports
import {
  MachinePersonnelView,
  DepartmentPersonnelView,
  RolePersonnelView,
  AllPersonnelView,
} from '../components/PersonnelViews';

// ✅ Bundle Size Optimization Techniques
// 1. Tree-shaking friendly imports
import { MachinePersonnelView } from './MachinePersonnelView';
// NOT: import * as PersonnelViews from './PersonnelViews';

// 2. Component lazy loading (future optimization)
const MachinePersonnelView = React.lazy(() => 
  import('./MachinePersonnelView')
);

// 3. Conditional rendering optimization
{activeTab === 0 && <MachinePersonnelView {...props} />}
{activeTab === 1 && <DepartmentPersonnelView {...props} />}
```

#### Performance Metrics Achievement
```javascript
// ✅ File Size Targets Met
// Main file: 221 lines < 300 target ✅
// Components: All <200 lines ✅
// Bundle: 543.59KB < 600KB target ✅

// ✅ ESLint Compliance Patterns
// 1. Trailing commas consistency
const personnelData = {
  machines: machineData,
  departments: departmentData,
  roles: roleData, // ✅ Trailing comma
};

// 2. Quote consistency (single quotes preferred)
import { Card } from '@mui/material';
const title = 'Personnel Tracking';

// 3. Proper indentation (2 spaces)
const PersonnelCard = ({ person }) => {
  return (
    <Card>
      <CardContent>
        {person.name}
      </CardContent>
    </Card>
  );
};

// ✅ React Key Props Safety (prevents duplicate key errors)
{personnel.map((person, index) => (
  <PersonnelCard
    key={`personnel_${person._id || person.id}_${index}`}
    person={person}
  />
))}
```

### ✅ Başarıyla Düzeltilen ESLint Uyarıları

#### Frontend Düzeltmeleri (17 uyarı → 0 uyarı)
```javascript
// ✅ MonthlyPerformance.js - Kullanılmayan import'lar kaldırıldı
// ❌ ÖNCE: Paper, IconButton, Tooltip, VisibilityIcon, LineChart, Line
// ✅ SONRA: Sadece kullanılan import'lar

// ✅ OverviewDashboard.js - Kullanılmayan prop kaldırıldı
// ❌ ÖNCE: ({ summary, dailyPerformance, onShowTaskDetails })
// ✅ SONRA: ({ summary, dailyPerformance })

// ✅ ScoreDetails.js - useCallback ile React Hook dependency düzeltildi
const loadScoreData = useCallback(async () => {
  // API çağrısı
}, [filters, page, sortBy, sortOrder]);

useEffect(() => {
  loadScoreData();
}, [loadScoreData]);

// ✅ useWorkTaskData.js - Kullanılmayan useEffect import'u kaldırıldı
import { useState, useCallback } from 'react'; // useEffect kaldırıldı

// ✅ useTaskScoring.js - useCallback dependency uyarısı düzeltildi
// ❌ ÖNCE: Missing dependency 'onTabSwitch'
const submitScore = useCallback(async () => {
  // ... kod ...
  if (onTabSwitch) {
    setTimeout(() => {
      onTabSwitch(1); // Tab 1: Onaylananlar
    }, 1000);
  }
}, [
  selectedTask,
  scoringData,
  onSuccess,
  onError,
  onDataRefresh,
  closeScoreDialog,
]); // onTabSwitch eksik

// ✅ SONRA: onTabSwitch dependency eklendi
}, [
  selectedTask,
  scoringData,
  onSuccess,
  onError,
  onDataRefresh,
  onTabSwitch, // ✅ Eklendi
  closeScoreDialog,
]);

// ✅ TestExcelDownload.js - Kullanılmayan import ve emoji accessibility
// ❌ ÖNCE: Upload icon kullanılmıyor
import { Download, Upload } from '@mui/icons-material';

// ✅ SONRA: Sadece kullanılan import
import { Download } from '@mui/icons-material';

// ❌ ÖNCE: Emoji accessibility hatası
<Typography variant="h5" gutterBottom>
  📊 Excel Download Test
</Typography>

// ✅ SONRA: Screen reader uyumlu emoji
<Typography variant="h5" gutterBottom>
  <span role="img" aria-label="grafik tablosu">📊</span> Excel Download Test
</Typography>

// ✅ ManualEntry.js - Kullanılmayan değişkenler kaldırıldı
// ❌ ÖNCE: Kullanılmayan state değişkenleri
const [uploadYear, setUploadYear] = useState(new Date().getFullYear());
const [uploadMonth, setUploadMonth] = useState(new Date().getMonth() + 1);

// ✅ SONRA: Kullanılmayan değişkenler kaldırıldı
// Artık sadece gerçekten kullanılan state'ler tanımlı

// ✅ ScoreBreakdown.js - Kullanılmayan değişkenler _ prefix ile işaretlendi
const ScoreBreakdown = ({
  loading: _parentLoading, // ✅ _ prefix eklendi
  error: parentError,
  filters,
  monthlyTotals: parentMonthlyTotals,
  onFilterChange,
  onRefresh,
}) => {
  const {
    monthlyTotals: hookMonthlyTotals,
    hrScores,
    hrScoresLoading,
    workTaskScores,
    loading: _loading, // ✅ _ prefix eklendi
    error,
    loadHRScores,
    loadWorkTaskScores,
  } = useMyActivityData();

// ✅ MyActivity.js - Kullanılmayan import kaldırıldı
// ❌ ÖNCE: 
import { SecurityIcon } from '@mui/icons-material';

// ✅ SONRA: SecurityIcon kaldırıldı (kullanılmıyor)
import {
  Dashboard as DashboardIcon,
  TrendingUp as TrendingUpIcon,
  Assignment as AssignmentIcon,
  Science as ScienceIcon,
  People as PeopleIcon,
  Work as WorkIcon,
  ListAlt as ChecklistIcon,
  EmojiEvents as RankingIcon,
  CalendarToday as CalendarIcon,
} from '@mui/icons-material';

// ✅ Trailing comma hatları otomatik düzeltildi
const obj = {
  a: 1,
  b: 2, // ✅ Trailing comma eklendi
};

const array = [
  'item1',
  'item2', // ✅ Trailing comma eklendi
];

// ✅ Kullanılmayan ControlScores import'u kaldırıldı
// ❌ ÖNCE: import ControlScores from '../components/MyActivity/ControlScores';
// ✅ SONRA: Kaldırıldı (artık kullanılmıyor)
```

#### Comma-Dangle Düzeltmeleri
```javascript
// ✅ ESLint auto-fix ile düzeltilen trailing comma'lar

// ScoreBreakdown.js - 5 adet comma-dangle hatası düzeltildi
setControlError(
  err.response?.data?.message ||
    'Kontrol puanları yüklenirken hata oluştu', // ✅ Trailing comma eklendi
);

console.log(
  `Score ${index}: tip=${score.tip}, puan=${puan}, raw_object:`,
  score, // ✅ Trailing comma eklendi
);

console.log(
  '  - checklistSablonlari.iseBagliGorevler (eski fallback):',
  checklistSablonlari.iseBagliGorevler, // ✅ Trailing comma eklendi
);

// MyActivity.js - 3 adet comma-dangle hatası düzeltildi
console.log(
  `🔄 Tab ${activeTab} (${currentTab.label}) filtre değişimi nedeniyle yenileniyor...`, // ✅ Trailing comma eklendi
);

return scoreDetails.filter((s) =>
  ['checklist', 'worktask'].includes(s.tip), // ✅ Trailing comma eklendi
);

{new Date(new Date().getFullYear(), i).toLocaleDateString(
  'tr-TR',
  { month: 'long' }, // ✅ Trailing comma eklendi
)}
```

#### Backend Düzeltmeleri (18 uyarı → 0 uyarı)
```javascript
// ✅ Cache middleware - async/await optimizasyonu
// ❌ ÖNCE: for loop içinde await
for (const pattern of patterns) {
  await cacheService.delPattern(pattern);
}

// ✅ SONRA: Promise.all ile paralel işlem
const patternPromises = patterns.map((pattern) => {
  return cacheService.delPattern(pattern);
});
await Promise.all(patternPromises);

// ✅ MyActivityController - await in loop düzeltildi
// ❌ ÖNCE: for loop içinde await
for (const user of sameRoleUsers) {
  const userData = await MyActivityService.getUserSummary(user._id, days);
}

// ✅ SONRA: Promise.all ile paralel işlem
const userPromises = sameRoleUsers.map(async (user) => {
  return MyActivityService.getUserSummary(user._id, days);
});
const rankingResults = await Promise.all(userPromises);

// ✅ Kullanılmayan import'lar kaldırıldı
// - departments.js: invalidateCache, cacheService
// - inventory.js: invalidateCache, cacheService  
// - myActivity.js: invalidateCache, cacheService
// - qualityControl.js: User model
// - tasks-control.js: invalidateCache, cacheService
// - tasks-my.js: invalidateCache, cacheService
// - createPaketlemeciUser.js: Module model
// - cacheService.js: redis import (commented)
```

### 🔧 ESLint Düzeltme Patterns

#### 1. Kullanılmayan Import'lar
```javascript
// ❌ Kullanılmayan import'lar
import { Paper, IconButton, Tooltip } from '@mui/material';
import { useEffect } from 'react';

// ✅ Sadece kullanılan import'lar
import { Box, Typography } from '@mui/material';
import { useState } from 'react';
```

#### 2. React Hook Dependencies
```javascript
// ❌ Missing dependency
useEffect(() => {
  loadData();
}, [filters]); // loadData eksik

// ✅ useCallback ile çözüm
const loadData = useCallback(async () => {
  // API çağrısı
}, [filters, page, sortBy]);

useEffect(() => {
  loadData();
}, [loadData]);
```

#### 3. Async/Await Loop Optimizasyonu
```javascript
// ❌ Await in loop - Performance killer
for (const item of items) {
  await processItem(item);
}

// ✅ Promise.all ile paralel işlem
const promises = items.map(item => processItem(item));
const results = await Promise.all(promises);

// ✅ Null değerleri filtrele
const validResults = results.filter(result => result !== null);
```

#### 4. Kullanılmayan Parametreler
```javascript
// ❌ Kullanılmayan parametre
const Component = ({ data, onShowDetails }) => {
  return <div>{data.name}</div>; // onShowDetails kullanılmıyor
};

// ✅ Kullanılmayan parametreyi kaldır
const Component = ({ data }) => {
  return <div>{data.name}</div>;
};

// ✅ Veya underscore prefix kullan
const Component = ({ data, onShowDetails: _onShowDetails }) => {
  return <div>{data.name}</div>;
};
```

#### 5. Trailing Comma Zorunluluğu
```javascript
// ❌ Trailing comma eksik - YASAKLI
const obj = { a: 1, b: 2 };
const array = ['item1', 'item2'];

// ✅ Correct
const obj = { a: 1, b: 2, };
const array = ['item1', 'item2', ];

// ✅ Function parameters
const myFunction = (
  param1,
  param2, // ✅ Trailing comma zorunlu
) => {
  // Function body
};
```

#### 6. React Key Prop Fixes ✅ YENİ EKLENEN
```javascript
// ❌ Missing or incorrect key props
{items.map((item) => (
  <TableRow key={item._id}> // _id undefined olabilir
    <TableCell>{item.name}</TableCell>
  </TableRow>
))}

// ✅ Fallback key prop for mock data compatibility
{items.map((item) => (
  <TableRow key={item._id || item.id}> // ✅ Mock data uyumluluğu
    <TableCell>{item.name}</TableCell>
  </TableRow>
))}

// ✅ Complex unique key generation
{items.map((item, index) => (
  <TableRow key={`${item._id || item.id || index}-${item.type}`}>
    <TableCell>{item.name}</TableCell>
  </TableRow>
))}

// ✅ Component with multiple lists
const MyComponent = ({ users, roles }) => (
  <div>
    {users.map((user) => (
      <UserCard key={`user-${user._id || user.id}`} user={user} />
    ))}
    {roles.map((role) => (
      <RoleCard key={`role-${role._id || role.id}`} role={role} />
    ))}
  </div>
);

// ❌ YASAKLI: Index as key for dynamic lists
{items.map((item, index) => (
  <TableRow key={index}> // ❌ Re-order sorunlarına neden olur
    <TableCell>{item.name}</TableCell>
  </TableRow>
))}

// ✅ Unique identifier required for React Lists
{items.map((item, index) => (
  <TableRow key={item.uniqueField || `fallback-${index}`}>
    <TableCell>{item.name}</TableCell>
  </TableRow>
))}
```

#### 7. Mock Data vs Real Data Field Mapping
```javascript
// ❌ Backend API ve Mock data field mismatch
const mockData = [
  { id: 1, name: 'Item 1' }, // Mock: 'id' field
];

// Real API response
const apiResponse = [
  { _id: '507f1f77bcf86cd799439011', name: 'Item 1' }, // API: '_id' field
];

// ✅ Universal key prop solution
<TableRow key={item._id || item.id || `item-${index}`}>

// ✅ TypeScript interface for consistency
interface Equipment {
  _id?: string;   // API field
  id?: number;    // Mock data field
  name: string;
  status: string;
}

// ✅ Data transformation for consistency
const normalizeData = (items: any[]) => 
  items.map(item => ({
    ...item,
    _id: item._id || item.id?.toString(),
  }));
```

#### 8. React Warning Prevention Patterns
```javascript
// ✅ Duplicate key prevention
const uniqueKey = (item, index, prefix = '') => 
  `${prefix}${item._id || item.id || `fallback-${index}`}`;

// ✅ Safe key generation with validation
const generateSafeKey = (item, index, context = '') => {
  const id = item._id || item.id;
  if (!id) {
    console.warn(`Missing unique ID for ${context} at index ${index}:`, item);
  }
  return `${context}-${id || `temp-${Date.now()}-${index}`}`;
};

// ✅ Component with error boundaries for keys
const SafeList = ({ items, renderItem, keyExtractor }) => (
  <div>
    {items.map((item, index) => (
      <ErrorBoundary key={keyExtractor(item, index)}>
        {renderItem(item, index)}
      </ErrorBoundary>
    ))}
  </div>
);
```

## Kritik ESLint Kuralları
```javascript
// ❌ If without braces - YASAKLI
if (condition) doSomething();

// ✅ Correct
if (condition) {
  doSomething();
}

// ❌ Unused variables - YASAKLI
const { unusedVar, usedVar } = data;

// ✅ Underscore prefix for unused
const { unusedVar: _unusedVar, usedVar } = data;
```

## Bundle Optimization (Zorunlu)
```javascript
// ✅ Tree-shaking friendly imports
import { Button, TextField } from "@mui/material";
import { useState, useEffect } from "react";

// ❌ Bundle killer imports - YASAKLI
import * as MUI from "@mui/material";
import * as React from "react";
```

## Performance Patterns
```javascript
// ✅ React.lazy for code splitting
const Dashboard = React.lazy(() => import("./pages/Dashboard"));
const UserManagement = React.lazy(() => import("./pages/UserManagement"));

// ✅ API performance tracking
const startTime = performance.now();
const response = await api.getData();
console.log(`API took: ${performance.now() - startTime}ms`);

// ✅ Memoization patterns
const ExpensiveComponent = React.memo(({ data }) => {
  const processedData = useMemo(() => 
    data.map(item => expensiveProcessing(item)), [data]
  );
  
  return <div>{processedData}</div>;
});
```

## Bundle Size Targets
- **Frontend Bundle**: < 600KB (gzipped)
- **Vendor Chunks**: < 300KB
- **Page Chunks**: < 100KB each
- **Lighthouse Score**: > 90

## Performance Monitoring (Zorunlu)
```javascript
// ✅ Bundle analysis command
"build:analyze": "npm run build && npx webpack-bundle-analyzer build/static/js/*.js"

// ✅ Performance audit
"perf:check": "npm run build && npm run lighthouse"
```

## ESLint Zero-Tolerance Policy
- **0 errors, 0 warnings** ZORUNLU ⚠️
- Pre-commit `npm run lint:fix` otomatik çalışacak
- Manual commit izni YOK

## 🎯 ESLint Tarama Komutları
```bash
# Frontend ESLint taraması
cd frontend && npm run lint

# Backend ESLint taraması  
cd backend && npm run lint

# Otomatik düzeltme
npm run lint:fix

# Tüm proje tarama
npm run lint:all

# Detaylı ESLint raporu
npx eslint src/ --format html --output-file eslint-report.html
```

## 📊 Başarı Metrikleri (2025-02-06)
- ✅ Frontend: 17 uyarı → 0 uyarı (%100 düzelme)
- ✅ Backend: 18 uyarı → 0 uyarı (%100 düzelme)
- ✅ Toplam: 35 uyarı → 0 uyarı (%100 düzelme)
- ✅ Performance: await in loop optimizasyonları
- ✅ Memory: Kullanılmayan import'lar temizlendi
- ✅ Bundle: Tree-shaking optimizasyonu
- ✅ Comma-dangle: Tüm trailing comma'lar düzeltildi
- ✅ React Hooks: Dependency uyarıları temizlendi

## Code Quality Metrics
- **Complexity**: < 10 per function
- **Test Coverage**: > 90% (gelecekte)
- **Duplication**: < 3% code duplication
- **Dependencies**: Regular audit

## Performance Killers (YASAKLI)
```javascript
// ❌ Loop içinde await
for (const item of items) {
  await processItem(item);
}

// ❌ Excessive re-renders
const Component = () => {
  const [count, setCount] = useState(0);
  
  // YASAKLI: Her render'da yeni object
  const style = { color: 'red' };
  
  return <div style={style}>{count}</div>;
};

// ❌ Synchronous API calls
const data1 = await api.getData1();
const data2 = await api.getData2();
```

## Production Build Checklist
```bash
# Pre-deployment validation (ZORUNLU)
npm run lint          # 0 errors, 0 warnings
npm run build         # Successful build  
npm run analyze:size  # Bundle size check
npm run lighthouse    # Performance score
```

## 🎯 Bugünkü ESLint Düzeltmeleri (2025-01-20)

### Trailing Comma Fixes
```javascript
// ✅ ScoreDialog.js düzeltmeleri
return scoringData.maddeler.reduce(
  (total, madde) => total + (madde.kontrolPuani || 0),
  0, // ✅ Trailing comma eklendi
);

// ✅ ControlPending.js düzeltmeleri
const workTasks = machineData.tasks.filter(
  (t) => t.taskType === 'worktask', // ✅ Trailing comma eklendi
);

const normalTasks = machineData.tasks.filter(
  (t) => t.taskType !== 'worktask', // ✅ Trailing comma eklendi
);

const totalTasks = Object.values(controlData).reduce(
  (total, machineData) => total + machineData.tasks.length,
  0, // ✅ Trailing comma eklendi
);
```

### String Escape Fixes
```javascript
// ❌ YANLIŞ: Double quotes içinde single quote escape
console.log("🔗 TEST URL'LERİ:");

// ✅ DOĞRU: Single quotes içinde escaped single quote
console.log('🔗 TEST URL\'LERİ:');

// ✅ ALTERNATİF: Template literal kullan
console.log(`🔗 TEST URL'LERİ:`);
```

### Modern ESLint Auto-Fix Commands
```bash
# Bugün kullanılan düzeltme komutları
npx eslint frontend/src/components/ControlPending/ScoreDialog.js --fix
npx eslint frontend/src/pages/ControlPending.js --fix
npx eslint backend/test-control-pending-yildiz.js --fix

# Tüm proje için otomatik düzeltme
npm run lint:fix:all

# Specific pattern düzeltmesi
npx eslint . --fix --ext .js,.jsx
```

### Component Re-render Optimization
```javascript
// ✅ Bugün kullanılan useCallback pattern
const handleFilterChange = useCallback((filters) => {
  setFilters(filters);
}, [setFilters]); // ✅ Dependency array trailing comma

// ✅ Array operations with trailing comma
const filteredTasks = tasks.filter((task) => {
  return task.status === 'pending';
}, ); // ✅ Filter callback trailing comma
```

### Star Rating Component ESLint Compliance
```javascript
// ✅ Rating component ESLint uyumlu
const StarRating = ({ value, onChange, max = 10, }) => { // ✅ Trailing comma
  const handleRatingChange = useCallback((event, newValue) => {
    onChange(newValue);
  }, [onChange]); // ✅ Dependency trailing comma

  return (
    <Rating
      value={value}
      onChange={handleRatingChange}
      max={max}
      size="large"
      sx={{
        fontSize: '2rem',
        '& .MuiRating-iconFilled': { color: '#ffd700' },
        '& .MuiRating-iconHover': { color: '#ffb400' },
      }}
    />
  );
};
```

## 🎯 Critical React Patterns (ZORUNLU)

### Key Prop Requirements
```javascript
// ✅ ZORUNLU: Her React list item unique key'e sahip olmalı
// ✅ ZORUNLU: Key değeri stable ve predictable olmalı  
// ✅ ZORUNLU: Index key'i sadece static listlerde kullanılabilir
// ❌ YASAKLI: Dynamic list'lerde index key kullanımı

// ✅ Key prop validation middleware
const validateKeys = (items) => {
  const keys = items.map((item, index) => item._id || item.id || index);
  const uniqueKeys = new Set(keys);
  
  if (keys.length !== uniqueKeys.size) {
    console.error('Duplicate keys detected in React list:', keys);
  }
  
  return keys.every(key => key !== undefined);
};
```

### React Development Environment Warnings
```javascript
// ✅ Development-only warning suppression
const isDevelopment = process.env.NODE_ENV === 'development';

// ✅ Console warning filtering
if (isDevelopment) {
  const originalWarn = console.warn;
  console.warn = (...args) => {
    if (typeof args[0] === 'string' && 
        args[0].includes('Each child in a list should have a unique "key"')) {
      // Custom key warning handler
      return;
    }
    originalWarn(...args);
  };
}
```