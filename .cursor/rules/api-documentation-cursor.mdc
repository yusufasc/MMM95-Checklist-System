---
description: Swagger documentation, OpenAPI schemas, API comments. Triggers: swagger, openapi, docs, API, @swagger, schema, endpoint, documentation, JSDoc.
globs: 
alwaysApply: false
---
---
# üìö MMM Checklist - API Documentation Kurallarƒ±

## üö® G√úNCEL DEƒûƒ∞≈ûƒ∞KLƒ∞KLER (2025-02-06)

### ‚úÖ MyActivity - Kontrol Puanlarƒ± API Entegrasyonu
```javascript
/**
 * @swagger
 * /api/control-scores/my-summary:
 *   get:
 *     summary: Kullanƒ±cƒ±nƒ±n kontrol puanlarƒ± √∂zeti
 *     description: MyActivity "Genel Karnem" segmentinde g√∂sterilecek kontrol puanlarƒ± kartƒ± verisi
 *     tags: [Control Scores]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Kontrol puanlarƒ± √∂zeti ba≈üarƒ±yla getirildi
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     genel:
 *                       type: object
 *                       properties:
 *                         toplamPuan:
 *                           type: number
 *                           example: 850
 *                           description: Kullanƒ±cƒ±nƒ±n toplam kontrol puanƒ±
 *                         toplamGorev:
 *                           type: number
 *                           example: 25
 *                           description: Puanlanan toplam g√∂rev sayƒ±sƒ±
 *                         ortalamaPuan:
 *                           type: number
 *                           example: 34
 *                           description: G√∂rev ba≈üƒ±na ortalama puan
 *                         basariYuzdesi:
 *                           type: number
 *                           example: 85
 *                           description: Ba≈üarƒ± y√ºzdesi
 *                     aylƒ±k:
 *                       type: object
 *                       properties:
 *                         toplamPuan:
 *                           type: number
 *                           example: 120
 *                         toplamGorev:
 *                           type: number
 *                           example: 4
 *                     haftalƒ±k:
 *                       type: object
 *                       properties:
 *                         toplamPuan:
 *                           type: number
 *                           example: 45
 *                         toplamGorev:
 *                           type: number
 *                           example: 2
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       500:
 *         $ref: '#/components/responses/InternalServerError'
 */

/**
 * Frontend kullanƒ±mƒ±:
 * import controlScoresAPI from '../../services/controlScoresAPI';
 * 
 * const loadControlScores = useCallback(async () => {
 *   try {
 *     setControlLoading(true);
 *     const response = await controlScoresAPI.getMySummary();
 *     setControlSummary(response.data);
 *   } catch (err) {
 *     setControlError(err.response?.data?.message || 'Kontrol puanlarƒ± y√ºklenirken hata olu≈ütu');
 *   } finally {
 *     setControlLoading(false);
 *   }
 * }, []);
 */
```

### ‚úÖ ScoreBreakdown Component Integration Pattern
```javascript
/**
 * @swagger
 * components:
 *   schemas:
 *     ScoreBreakdownProps:
 *       type: object
 *       description: ScoreBreakdown component props tanƒ±mƒ±
 *       properties:
 *         loading:
 *           type: boolean
 *           description: Parent loading state (artƒ±k kullanƒ±lmƒ±yor - _parentLoading)
 *         error:
 *           type: string
 *           description: Parent error state
 *         filters:
 *           type: object
 *           description: Parent'dan gelen filter deƒüerleri
 *           properties:
 *             month:
 *               type: number
 *               example: 2
 *             year:
 *               type: number
 *               example: 2025
 *         monthlyTotals:
 *           type: object
 *           description: Parent'dan gelen monthly totals verisi
 *         onFilterChange:
 *           type: function
 *           description: Parent'ƒ±n filter change handler'ƒ±
 *         onRefresh:
 *           type: function
 *           description: Parent'ƒ±n refresh handler'ƒ±
 * 
 *     ControlScoresCard:
 *       type: object
 *       description: Kontrol puanlarƒ± kartƒ± g√∂r√ºn√ºm√º
 *       properties:
 *         title:
 *           type: string
 *           example: "üõ°Ô∏è Kontrol Puanlarƒ±"
 *         icon:
 *           type: string
 *           example: "SecurityIcon"
 *         color:
 *           type: string
 *           example: "purple"
 *         gridSize:
 *           type: string
 *           example: "xs=12 md=4"
 *           description: "3'l√º hizalama i√ßin md=4 kullanƒ±lƒ±r"
 *         cardHeight:
 *           type: string
 *           example: "100%"
 *           description: "T√ºm kartlar aynƒ± y√ºkseklikte"
 *         border:
 *           type: string
 *           example: "2px solid purple"
 *           description: "Puan varsa purple, yoksa grey"
 *         hoverEffect:
 *           type: object
 *           properties:
 *             transform:
 *               type: string
 *               example: "translateY(-4px)"
 *             boxShadow:
 *               type: string
 *               example: "0 8px 25px rgba(0,0,0,0.15)"
 */
```

### Kalite Kontrol Dashboard API ‚úÖ
```javascript
/**
 * @swagger
 * /api/quality-control/dashboard/summary:
 *   get:
 *     summary: Kalite kontrol dashboard √∂zet bilgileri
 *     description: Aktif ≈üablonlar, aylƒ±k/g√ºnl√ºk deƒüerlendirmeler ve ortalama puan
 *     tags: [Quality Control Dashboard]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Dashboard √∂zet bilgileri
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     activeTemplates:
 *                       type: number
 *                       example: 5
 *                       description: Aktif ≈üablon sayƒ±sƒ±
 *                     monthlyEvaluations:
 *                       type: number
 *                       example: 42
 *                       description: Bu ay yapƒ±lan deƒüerlendirme sayƒ±sƒ±
 *                     todayEvaluations:
 *                       type: number
 *                       example: 8
 *                       description: Bug√ºn yapƒ±lan deƒüerlendirme sayƒ±sƒ±
 *                     avgScore:
 *                       type: number
 *                       example: 87.5
 *                       description: Bu ayƒ±n ortalama puanƒ±
 *
 * /api/quality-control/dashboard/recent-evaluations:
 *   get:
 *     summary: Son deƒüerlendirmeler
 *     description: Son 5 kalite kontrol deƒüerlendirmesi
 *     tags: [Quality Control Dashboard]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Son deƒüerlendirmeler
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       _id:
 *                         type: string
 *                         example: "507f1f77bcf86cd799439011"
 *                       degerlendirilen:
 *                         type: object
 *                         properties:
 *                           ad:
 *                             type: string
 *                             example: "Ahmet"
 *                           soyad:
 *                             type: string
 *                             example: "Yƒ±lmaz"
 *                       degerlendiren:
 *                         type: object
 *                         properties:
 *                           ad:
 *                             type: string
 *                             example: "Fatma"
 *                           soyad:
 *                             type: string
 *                             example: "Kaya"
 *                       sablon:
 *                         type: object
 *                         properties:
 *                           ad:
 *                             type: string
 *                             example: "√úretim Kalite Kontrol√º"
 *                       toplamPuan:
 *                         type: number
 *                         example: 85
 *                       createdAt:
 *                         type: string
 *                         format: date-time
 *                         example: "2025-02-06T10:30:00Z"
 *
 * /api/quality-control/dashboard/performance-trend:
 *   get:
 *     summary: Performans trendi
 *     description: Son 7 g√ºn√ºn g√ºnl√ºk performans trendi
 *     tags: [Quality Control Dashboard]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Performans trend verileri
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       _id:
 *                         type: string
 *                         example: "2025-02-06"
 *                         description: Tarih (YYYY-MM-DD format)
 *                       avgScore:
 *                         type: number
 *                         example: 87.5
 *                         description: O g√ºn√ºn ortalama puanƒ±
 *                       count:
 *                         type: number
 *                         example: 12
 *                         description: O g√ºn yapƒ±lan deƒüerlendirme sayƒ±sƒ±
 *
 * /api/quality-control/dashboard/department-performance:
 *   get:
 *     summary: Departman performansƒ±
 *     description: Bu ayƒ±n departman bazlƒ± performans verileri
 *     tags: [Quality Control Dashboard]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Departman performans verileri
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       _id:
 *                         type: string
 *                         example: "√úretim"
 *                         description: Departman adƒ±
 *                       avgScore:
 *                         type: number
 *                         example: 92.3
 *                         description: Departmanƒ±n ortalama puanƒ±
 *                       count:
 *                         type: number
 *                         example: 25
 *                         description: Departmandaki deƒüerlendirme sayƒ±sƒ±
 */
```

### MyActivity API Endpoints ‚úÖ
```javascript
/**
 * @swagger
 * /api/my-activity/task-details/{id}:
 *   get:
 *     summary: G√∂rev detaylarƒ±nƒ± getir (t√ºm tip desteƒüi)
 *     description: |
 *       ID'ye g√∂re g√∂rev detaylarƒ±nƒ± getirir. Desteklenen tipler:
 *       - Normal Task (checklist)
 *       - WorkTask (worktask) - Kalƒ±p deƒüi≈üim g√∂revleri
 *       - HR Evaluation (hr_checklist_, hr_mesai_, hr_devamsizlik_)
 *       - Quality Control (quality_control)
 *     tags: [MyActivity]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: |
 *           G√∂rev ID'si. Formatlar:
 *           - MongoDB ObjectId (24 karakter) - Normal Task/WorkTask/QualityControl
 *           - hr_checklist_{hrScoreId}_{timestamp} - HR Checklist
 *           - hr_mesai_{hrScoreId}_{timestamp} - HR Mesai
 *           - hr_devamsizlik_{hrScoreId}_{timestamp} - HR Devamsƒ±zlƒ±k
 *         examples:
 *           normalTask:
 *             value: "507f1f77bcf86cd799439011"
 *             summary: Normal Task ID
 *           workTask:
 *             value: "507f1f77bcf86cd799439012"
 *             summary: WorkTask ID
 *           hrChecklist:
 *             value: "hr_checklist_507f1f77bcf86cd799439013_1704067200000"
 *             summary: HR Checklist ID
 *     responses:
 *       200:
 *         description: G√∂rev detaylarƒ± ba≈üarƒ±yla getirildi
 *         content:
 *           application/json:
 *             schema:
 *               oneOf:
 *                 - $ref: '#/components/schemas/TaskDetails'
 *                 - $ref: '#/components/schemas/WorkTaskDetails'
 *                 - $ref: '#/components/schemas/HRTaskDetails'
 *                 - $ref: '#/components/schemas/QualityControlDetails'
 *       404:
 *         description: G√∂rev bulunamadƒ±
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "G√∂rev bulunamadƒ±"
 *       500:
 *         description: Sunucu hatasƒ±
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Sunucu hatasƒ±"
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     TaskDetails:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           example: "507f1f77bcf86cd799439011"
 *         tip:
 *           type: string
 *           enum: [checklist]
 *           example: "checklist"
 *         checklistAdi:
 *           type: string
 *           example: "G√ºnl√ºk Makina Kontrol√º"
 *         kategori:
 *           type: string
 *           example: "√úretim"
 *         aciklama:
 *           type: string
 *           example: "Makina g√ºvenlik ve performans kontrol√º"
 *         kullanici:
 *           type: object
 *           properties:
 *             ad:
 *               type: string
 *               example: "Ahmet"
 *             soyad:
 *               type: string
 *               example: "Yƒ±lmaz"
 *             kullaniciAdi:
 *               type: string
 *               example: "ahmet.yilmaz"
 *         makina:
 *           type: string
 *           example: "Enjeksiyon Makinasƒ± 1 (M001)"
 *           description: "Makina adƒ± ve envanter kodu formatƒ±nda"
 *         durum:
 *           type: string
 *           enum: [bekliyor, tamamlandi, onaylandi, reddedildi]
 *           example: "tamamlandi"
 *         tamamlanmaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T10:30:00Z"
 *         onayTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T14:20:00Z"
 *         kontrolTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T14:15:00Z"
 *         onaylayan:
 *           type: object
 *           properties:
 *             ad:
 *               type: string
 *               example: "Mehmet"
 *             soyad:
 *               type: string
 *               example: "Demir"
 *         kontroleden:
 *           type: object
 *           properties:
 *             ad:
 *               type: string
 *               example: "Fatma"
 *             soyad:
 *               type: string
 *               example: "Kaya"
 *         toplamPuan:
 *           type: number
 *           example: 85
 *           description: "Kullanƒ±cƒ±nƒ±n aldƒ±ƒüƒ± toplam puan"
 *         kontrolToplamPuani:
 *           type: number
 *           example: 90
 *           description: "Kontrol sonrasƒ± verilen toplam puan"
 *         maddeler:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/TaskItem'
 *
 *     WorkTaskDetails:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           example: "507f1f77bcf86cd799439012"
 *         tip:
 *           type: string
 *           enum: [worktask]
 *           example: "worktask"
 *         checklistAdi:
 *           type: string
 *           example: "Kalƒ±p Deƒüi≈üim S√ºreci"
 *         kategori:
 *           type: string
 *           enum: [ƒ∞≈üe Baƒülƒ±]
 *           example: "ƒ∞≈üe Baƒülƒ±"
 *         aciklama:
 *           type: string
 *           example: "Plastik enjeksiyon kalƒ±p deƒüi≈üim prosed√ºr√º"
 *         kullanici:
 *           $ref: '#/components/schemas/UserInfo'
 *         makina:
 *           type: string
 *           example: "Enjeksiyon Makinasƒ± 2 (INV002)"
 *           description: "Makina adƒ± ve envanter kodu formatƒ±nda"
 *         indirilenKalip:
 *           type: object
 *           properties:
 *             ad:
 *               type: string
 *               example: "Kapak Kalƒ±bƒ± A1"
 *             envanterKodu:
 *               type: string
 *               example: "KLP001"
 *             dinamikAlanlar:
 *               type: object
 *               example: { "uretilecekUrun": "Plastik Kapak", "lokasyon": "Depo A" }
 *         baglananHamade:
 *           type: object
 *           properties:
 *             ad:
 *               type: string
 *               example: "G√∂vde Kalƒ±bƒ± B2"
 *             envanterKodu:
 *               type: string
 *               example: "KLP002"
 *             dinamikAlanlar:
 *               type: object
 *               example: { "uretilecekUrun": "Plastik G√∂vde", "lokasyon": "Depo B" }
 *         olusturulmaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T08:00:00Z"
 *         tamamlanmaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T10:30:00Z"
 *         onayTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T14:20:00Z"
 *         kontrolTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T14:15:00Z"
 *         durum:
 *           type: string
 *           enum: [bekliyor, tamamlandi, onaylandi, reddedildi]
 *           example: "tamamlandi"
 *         onaylayanKullanici:
 *           $ref: '#/components/schemas/UserInfo'
 *         maddeler:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/WorkTaskItem'
 *         toplamPuan:
 *           type: number
 *           example: 100
 *           description: "Checklist'teki toplam puan"
 *         alinanPuan:
 *           type: number
 *           example: 85
 *           description: "Kullanƒ±cƒ±nƒ±n aldƒ±ƒüƒ± puan"
 *         kontrolToplamPuani:
 *           type: number
 *           example: 90
 *           description: "Kontrol sonrasƒ± verilen puan"
 *         basariYuzdesi:
 *           type: number
 *           example: 90
 *           description: "Ba≈üarƒ± y√ºzdesi"
 *
 *     TaskItem:
 *       type: object
 *       properties:
 *         sira:
 *           type: number
 *           example: 1
 *         soru:
 *           type: string
 *           example: "Makina g√ºvenlik sistemleri √ßalƒ±≈üƒ±yor mu?"
 *         cevap:
 *           type: boolean
 *           example: true
 *         kendiPuani:
 *           type: number
 *           example: 0
 *           description: "Artƒ±k kullanƒ±lmƒ±yor"
 *         maxPuan:
 *           type: number
 *           example: 10
 *           description: "Bu madde i√ßin maksimum puan"
 *         kontrolPuani:
 *           type: number
 *           example: 9
 *           description: "Kontrol eden tarafƒ±ndan verilen puan"
 *         yorum:
 *           type: string
 *           example: "G√ºvenlik sistemleri normal √ßalƒ±≈üƒ±yor"
 *         kontrolYorumu:
 *           type: string
 *           example: "Kontrol edildi, uygun"
 *         resimUrl:
 *           type: string
 *           example: "/uploads/task-images/image1.jpg"
 *         kontrolResimUrl:
 *           type: string
 *           example: "/uploads/control-images/control1.jpg"
 *         toplamPuan:
 *           type: number
 *           example: 9
 *           description: "Bu madde i√ßin alƒ±nan toplam puan"
 *
 *     WorkTaskItem:
 *       type: object
 *       properties:
 *         soru:
 *           type: string
 *           example: "Kalƒ±p deƒüi≈üimi tamamlandƒ± mƒ±?"
 *         puan:
 *           type: number
 *           example: 20
 *           description: "Bu madde i√ßin puan deƒüeri"
 *         maxPuan:
 *           type: number
 *           example: 20
 *           description: "Frontend uyumluluƒüu i√ßin"
 *         cevap:
 *           type: string
 *           example: "Evet"
 *           description: "Kullanƒ±cƒ±nƒ±n cevabƒ±"
 *         alinanPuan:
 *           type: number
 *           example: 18
 *           description: "Bu madde i√ßin alƒ±nan puan"
 *         yorum:
 *           type: string
 *           example: "Kalƒ±p deƒüi≈üimi sorunsuz tamamlandƒ±"
 *         resim:
 *           type: string
 *           example: "/uploads/worktask-images/kalip1.jpg"
 *         kontrolYorumu:
 *           type: string
 *           example: "Prosed√ºr uygun ≈üekilde takip edilmi≈ü"
 *         kontrolPuani:
 *           type: number
 *           example: 18
 *           description: "Kontrol eden tarafƒ±ndan verilen puan"
 *         sira:
 *           type: number
 *           example: 1
 *           description: "Madde sƒ±rasƒ±"
 *
 *     UserInfo:
 *       type: object
 *       properties:
 *         ad:
 *           type: string
 *           example: "Ahmet"
 *         soyad:
 *           type: string
 *           example: "Yƒ±lmaz"
 *         kullaniciAdi:
 *           type: string
 *           example: "ahmet.yilmaz"
 *
 *     HRTaskDetails:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           example: "hr_checklist_507f1f77bcf86cd799439013_1704067200000"
 *         tip:
 *           type: string
 *           enum: [hr_checklist, hr_mesai, hr_devamsizlik]
 *           example: "hr_checklist"
 *         checklistAdi:
 *           type: string
 *           example: "ƒ∞K ≈ûablon Deƒüerlendirmesi"
 *         kategori:
 *           type: string
 *           example: "ƒ∞K Checklist"
 *         durum:
 *           type: string
 *           enum: [tamamlandi]
 *           example: "tamamlandi"
 *         tamamlanmaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T10:30:00Z"
 *         puanlamaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T10:30:00Z"
 *         puanlayanKullanici:
 *           type: object
 *           properties:
 *             ad:
 *               type: string
 *               example: "ƒ∞K"
 *             soyad:
 *               type: string
 *               example: "Departmanƒ±"
 *         maddeler:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               sira:
 *                 type: number
 *                 example: 1
 *               soru:
 *                 type: string
 *                 example: "Mesai Saati"
 *               cevap:
 *                 type: string
 *                 example: "8 saat"
 *               kontrolPuani:
 *                 type: number
 *                 example: 100
 *               maxPuan:
 *                 type: number
 *                 example: 100
 *               kontrolYorumu:
 *                 type: string
 *                 example: "Normal mesai saati"
 *               toplamPuan:
 *                 type: number
 *                 example: 100
 *
 *     QualityControlDetails:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           example: "507f1f77bcf86cd799439014"
 *         tip:
 *           type: string
 *           enum: [quality_control]
 *           example: "quality_control"
 *         checklistAdi:
 *           type: string
 *           example: "Kalite Kontrol Deƒüerlendirmesi"
 *         kategori:
 *           type: string
 *           enum: [Kalite Kontrol]
 *           example: "Kalite Kontrol"
 *         durum:
 *           type: string
 *           enum: [tamamlandi]
 *           example: "tamamlandi"
 *         tamamlanmaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T10:30:00Z"
 *         puanlamaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T10:30:00Z"
 *         puanlayanKullanici:
 *           $ref: '#/components/schemas/UserInfo'
 *         maddeler:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               sira:
 *                 type: number
 *                 example: 1
 *               soru:
 *                 type: string
 *                 example: "√úr√ºn kalite standartlarƒ±"
 *               cevap:
 *                 type: string
 *                 enum: [Deƒüerlendirildi]
 *                 example: "Deƒüerlendirildi"
 *               kontrolPuani:
 *                 type: number
 *                 example: 85
 *               maxPuan:
 *                 type: number
 *                 example: 100
 *               kontrolYorumu:
 *                 type: string
 *                 example: "Standartlara uygun"
 *               toplamPuan:
 *                 type: number
 *                 example: 85
 *               resimUrl:
 *                 type: string
 *                 example: "/uploads/quality-images/sample1.jpg"
 */
```

### Yeni Birle≈ütirilmi≈ü API'ler
```javascript
/**
 * @swagger
 * /api/inventory/machines:
 *   get:
 *     summary: Birle≈ütirilmi≈ü makina listesi
 *     description: Hem Machine hem InventoryItem modellerinden makinalarƒ± getirir
 *     tags: [Inventory]
 *     parameters:
 *       - in: query
 *         name: source
 *         schema:
 *           type: string
 *           enum: [all, machine, inventory]
 *           default: all
 *         description: Veri kaynaƒüƒ± (all=t√ºm√º, machine=Machine model, inventory=InventoryItem)
 *     responses:
 *       200:
 *         description: Makina listesi
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   _id: { type: string }
 *                   ad: { type: string }
 *                   kod: { type: string }
 *                   tip: { type: string, enum: [machine, inventoryItem] }
 *                   kaynak: { type: string }
 *                   lokasyon: { type: string }
 *                   durum: { type: string }
 */

/**
 * @swagger
 * /api/inventory/machines/{id}:
 *   get:
 *     summary: Makina detayƒ± (tip agnostik)
 *     description: ID'ye g√∂re Machine veya InventoryItem detayƒ±nƒ± getirir
 *     tags: [Inventory]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Makina ID (Machine veya InventoryItem)
 */
```

### Deprecated API'ler
```javascript
/**
 * @deprecated /api/tasks/inventory-machines yerine /api/inventory/machines kullanƒ±n
 * @deprecated /api/inventory/machines-for-tasks yerine /api/inventory/machines kullanƒ±n
 */
```

### WorkTask API Documentation (2025-02-06)
```javascript
/**
 * @swagger
 * /api/worktasks:
 *   post:
 *     summary: Yeni kalƒ±p deƒüi≈üim g√∂revi olu≈ütur
 *     description: ƒ∞≈üe baƒülƒ± (olay bazlƒ±) checklist i√ßin g√∂rev olu≈üturur
 *     tags: [WorkTasks]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - checklistId
 *               - makinaId
 *               - indirilenKalip
 *               - baglananHamade
 *               - makinaDurmaSaati
 *               - yeniKalipAktifSaati
 *             properties:
 *               checklistId:
 *                 type: string
 *                 description: ƒ∞≈üe baƒülƒ± checklist ID
 *               makinaId:
 *                 type: string
 *                 description: Makina ID (Machine veya InventoryItem)
 *               indirilenKalip:
 *                 type: string
 *                 description: ƒ∞ndirilen kalƒ±p ID
 *               baglananHamade:
 *                 type: string
 *                 description: Baƒülanan kalƒ±p/hamadde ID
 *               makinaDurmaSaati:
 *                 type: string
 *                 format: date-time
 *               yeniKalipAktifSaati:
 *                 type: string
 *                 format: date-time
 *               bakimaGitsinMi:
 *                 type: boolean
 *                 default: false
 *               bakimSebebi:
 *                 type: string
 *               bakimResimUrl:
 *                 type: string
 *     responses:
 *       200:
 *         description: G√∂rev ba≈üarƒ±yla olu≈üturuldu
 *       500:
 *         description: Sunucu hatasƒ±
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 error:
 *                   type: string
 *                 stack:
 *                   type: string
 *                   description: Sadece development ortamƒ±nda
 */

/**
 * @swagger
 * /api/worktasks/{id}/items:
 *   put:
 *     summary: Checklist maddelerini g√ºncelle
 *     tags: [WorkTasks]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               maddeler:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     maddeId:
 *                       type: string
 *                     yapildi:
 *                       type: boolean
 */

/**
 * @swagger
 * /api/inventory/kalips-for-tasks:
 *   get:
 *     summary: Kalƒ±p deƒüi≈üim i√ßin kalƒ±plarƒ± listele
 *     description: Kalƒ±p kategorisindeki aktif envanteri getirir (esnek kategori aramasƒ±)
 *     tags: [Inventory]
 *     responses:
 *       200:
 *         description: Kalƒ±p listesi
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   _id: { type: string }
 *                   ad: { type: string }
 *                   kod: { type: string }
 *                   envanterKodu: { type: string }
 *                   uretilecekUrun: { type: string }
 *                   lokasyon: { type: string }
 */
```

## Swagger/OpenAPI Documentation (Zorunlu)
```javascript
/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: Kullanƒ±cƒ± listesini getir
 *     description: Sistemdeki t√ºm aktif kullanƒ±cƒ±larƒ± getirir
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Sayfa numarasƒ±
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 10
 *         description: Sayfa ba≈üƒ±na kayƒ±t sayƒ±sƒ±
 *       - in: query
 *         name: durum
 *         schema:
 *           type: string
 *           enum: [aktif, pasif]
 *         description: Kullanƒ±cƒ± durumu filtresi
 *     responses:
 *       200:
 *         description: Kullanƒ±cƒ± listesi ba≈üarƒ±yla getirildi
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/User'
 *                 pagination:
 *                   $ref: '#/components/schemas/Pagination'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       500:
 *         $ref: '#/components/responses/InternalServerError'
 */
router.get("/", auth, checkModulePermission("Users"), async (req, res) => {
  // Implementation
});
```

## Schema Definitions
```javascript
/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - ad
 *         - soyad
 *         - kullaniciAdi
 *       properties:
 *         _id:
 *           type: string
 *           description: Kullanƒ±cƒ± ID'si
 *           example: "507f1f77bcf86cd799439011"
 *         ad:
 *           type: string
 *           description: Kullanƒ±cƒ± adƒ±
 *           example: "Ahmet"
 *           maxLength: 50
 *         soyad:
 *           type: string
 *           description: Kullanƒ±cƒ± soyadƒ±
 *           example: "Yƒ±lmaz"
 *           maxLength: 50
 *         kullaniciAdi:
 *           type: string
 *           description: Benzersiz kullanƒ±cƒ± adƒ±
 *           example: "ahmet.yilmaz"
 *           maxLength: 30
 *         email:
 *           type: string
 *           format: email
 *           description: E-posta adresi
 *           example: "ahmet@example.com"
 *         roller:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Role'
 *           description: Kullanƒ±cƒ±nƒ±n rolleri
 *         departmanlar:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Department'
 *           description: Kullanƒ±cƒ±nƒ±n departmanlarƒ±
 *         durum:
 *           type: string
 *           enum: [aktif, pasif]
 *           description: Kullanƒ±cƒ± durumu
 *           example: "aktif"
 *         olusturmaTarihi:
 *           type: string
 *           format: date-time
 *           description: Kayƒ±t olu≈üturma tarihi
 *           example: "2024-01-15T10:30:00Z"
 *         guncellemeTarihi:
 *           type: string
 *           format: date-time
 *           description: Son g√ºncelleme tarihi
 *           example: "2024-01-16T14:20:00Z"
 *
 *     UserCreate:
 *       type: object
 *       required:
 *         - ad
 *         - soyad
 *         - kullaniciAdi
 *         - sifre
 *       properties:
 *         ad:
 *           type: string
 *           minLength: 2
 *           maxLength: 50
 *           example: "Ahmet"
 *         soyad:
 *           type: string
 *           minLength: 2
 *           maxLength: 50
 *           example: "Yƒ±lmaz"
 *         kullaniciAdi:
 *           type: string
 *           minLength: 3
 *           maxLength: 30
 *           pattern: "^[a-zA-Z0-9._-]+$"
 *           example: "ahmet.yilmaz"
 *         sifre:
 *           type: string
 *           minLength: 6
 *           maxLength: 100
 *           description: "En az 6 karakter, b√ºy√ºk/k√º√ß√ºk harf ve rakam i√ßermeli"
 *           example: "Sifre123"
 *         email:
 *           type: string
 *           format: email
 *           example: "ahmet@example.com"
 *         roller:
 *           type: array
 *           items:
 *             type: string
 *           description: "Role ID'leri"
 *           example: ["507f1f77bcf86cd799439011"]
 *         departmanlar:
 *           type: array
 *           items:
 *             type: string
 *           description: "Departman ID'leri"
 *           example: ["507f1f77bcf86cd799439012"]
 */
```

## Response Schemas
```javascript
/**
 * @swagger
 * components:
 *   responses:
 *     UnauthorizedError:
 *       description: Yetkisiz eri≈üim
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               success:
 *                 type: boolean
 *                 example: false
 *               message:
 *                 type: string
 *                 example: "Token bulunamadƒ± veya ge√ßersiz"
 *
 *     ForbiddenError:
 *       description: Yetki yok
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               success:
 *                 type: boolean
 *                 example: false
 *               message:
 *                 type: string
 *                 example: "Bu i≈ülem i√ßin yetkiniz yok"
 *
 *     ValidationError:
 *       description: Doƒürulama hatasƒ±
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               success:
 *                 type: boolean
 *                 example: false
 *               message:
 *                 type: string
 *                 example: "Doƒürulama hatasƒ±"
 *               errors:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     field:
 *                       type: string
 *                       example: "kullaniciAdi"
 *                     message:
 *                       type: string
 *                       example: "Kullanƒ±cƒ± adƒ± zorunludur"
 *
 *     InternalServerError:
 *       description: Sunucu hatasƒ±
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               success:
 *                 type: boolean
 *                 example: false
 *               message:
 *                 type: string
 *                 example: "Sunucu hatasƒ±"
 *
 *   schemas:
 *     Pagination:
 *       type: object
 *       properties:
 *         currentPage:
 *           type: integer
 *           example: 1
 *         totalPages:
 *           type: integer
 *           example: 5
 *         totalItems:
 *           type: integer
 *           example: 47
 *         hasNextPage:
 *           type: boolean
 *           example: true
 *         hasPrevPage:
 *           type: boolean
 *           example: false
 */
```

## Security Definitions
```javascript
/**
 * @swagger
 * components:
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 *       description: "JWT token ile kimlik doƒürulama. Header: Authorization Bearer <token>"
 *
 * security:
 *   - bearerAuth: []
 */
```

## Route Documentation Pattern
```javascript
/**
 * @swagger
 * /api/users/{id}:
 *   get:
 *     summary: Kullanƒ±cƒ± detayƒ± getir
 *     description: ID'si verilen kullanƒ±cƒ±nƒ±n detay bilgilerini getirir
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           pattern: "^[0-9a-fA-F]{24}$"
 *         description: Kullanƒ±cƒ± MongoDB ObjectId
 *         example: "507f1f77bcf86cd799439011"
 *     responses:
 *       200:
 *         description: Kullanƒ±cƒ± detayƒ± ba≈üarƒ±yla getirildi
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/User'
 *       404:
 *         description: Kullanƒ±cƒ± bulunamadƒ±
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: "Kullanƒ±cƒ± bulunamadƒ±"
 *
 *   put:
 *     summary: Kullanƒ±cƒ± g√ºncelle
 *     description: ID'si verilen kullanƒ±cƒ±nƒ±n bilgilerini g√ºnceller
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Kullanƒ±cƒ± ID'si
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UserUpdate'
 *     responses:
 *       200:
 *         description: Kullanƒ±cƒ± ba≈üarƒ±yla g√ºncellendi
 *       400:
 *         $ref: '#/components/responses/ValidationError'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       404:
 *         description: Kullanƒ±cƒ± bulunamadƒ±
 */
```

## API Comments Standards
```javascript
// ‚úÖ Route function comments
/**
 * Kullanƒ±cƒ± listesini getirir
 * @route GET /api/users
 * @access Private - Auth required
 * @permission Users module read access
 * @param {Object} req.query - Query parameters
 * @param {number} req.query.page - Sayfa numarasƒ± (default: 1)
 * @param {number} req.query.limit - Sayfa ba≈üƒ±na kayƒ±t (default: 10, max: 100)
 * @param {string} req.query.durum - Durum filtresi (aktif/pasif)
 * @param {string} req.query.search - Arama terimi (ad, soyad, kullaniciAdi)
 * @returns {Object} Kullanƒ±cƒ± listesi ve pagination bilgisi
 * @throws {401} Unauthorized - Token yoksa veya ge√ßersizse
 * @throws {403} Forbidden - Mod√ºl yetkisi yoksa
 * @throws {500} Internal Server Error - Sunucu hatasƒ±
 */
const getUsers = async (req, res) => {
  // Implementation
};

// ‚úÖ Model field comments
const UserSchema = new mongoose.Schema({
  ad: {
    type: String,
    required: [true, 'Ad alanƒ± zorunludur'],
    trim: true,
    maxlength: [50, 'Ad 50 karakterden uzun olamaz'],
    // ƒ∞zin verilen karakterler: T√ºrk√ße harfler, bo≈üluk
    validate: {
      validator: function(v) {
        return /^[a-zA-Zƒüƒûƒ±ƒ∞√∂√ñ√º√ú≈ü≈û√ß√á\s]+$/.test(v);
      },
      message: 'Ad sadece harf ve bo≈üluk i√ßerebilir'
    }
  },
  
  kullaniciAdi: {
    type: String,
    required: [true, 'Kullanƒ±cƒ± adƒ± zorunludur'],
    unique: true,
    trim: true,
    lowercase: true,
    minlength: [3, 'Kullanƒ±cƒ± adƒ± en az 3 karakter olmalƒ±'],
    maxlength: [30, 'Kullanƒ±cƒ± adƒ± 30 karakterden uzun olamaz'],
    // ƒ∞zin verilen: harf, rakam, nokta, tire, alt √ßizgi
    validate: {
      validator: function(v) {
        return /^[a-z0-9._-]+$/.test(v);
      },
      message: 'Kullanƒ±cƒ± adƒ± sadece k√º√ß√ºk harf, rakam, nokta, tire ve alt √ßizgi i√ßerebilir'
    }
  }
});
```

## Documentation Generation
```javascript
// ‚úÖ Swagger configuration
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'MMM Checklist API',
      version: '1.0.0',
      description: 'End√ºstriyel Checklist ve G√∂rev Y√∂netim Sistemi API D√∂k√ºmantasyonu',
      contact: {
        name: 'MMM Team',
        email: 'support@mmm.com'
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT'
      }
    },
    servers: [
      {
        url: 'http://localhost:5000',
        description: 'Development server'
      },
      {
        url: 'https://api.mmm.com',
        description: 'Production server'
      }
    ],
    tags: [
      {
        name: 'Auth',
        description: 'Kimlik doƒürulama i≈ülemleri'
      },
      {
        name: 'Users',
        description: 'Kullanƒ±cƒ± y√∂netimi'
      },
      {
        name: 'Tasks',
        description: 'G√∂rev y√∂netimi'
      },
      {
        name: 'Inventory',
        description: 'Envanter y√∂netimi'
      }
    ]
  },
  apis: ['./routes/*.js', './models/*.js']
};

const specs = swaggerJsdoc(options);

// Swagger UI setup
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs, {
  explorer: true,
  customCss: '.swagger-ui .topbar { display: none }',
  customSiteTitle: 'MMM Checklist API Docs'
}));
```

## API Testing Documentation
```javascript
/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Kullanƒ±cƒ± giri≈üi
 *     description: Kullanƒ±cƒ± adƒ± ve ≈üifre ile sistem giri≈üi
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - kullaniciAdi
 *               - sifre
 *             properties:
 *               kullaniciAdi:
 *                 type: string
 *                 example: "admin"
 *               sifre:
 *                 type: string
 *                 example: "123456"
 *           examples:
 *             admin:
 *               summary: Admin kullanƒ±cƒ±sƒ±
 *               value:
 *                 kullaniciAdi: "admin"
 *                 sifre: "admin123"
 *             normalUser:
 *               summary: Normal kullanƒ±cƒ±
 *               value:
 *                 kullaniciAdi: "user1"
 *                 sifre: "user123"
 *     responses:
 *       200:
 *         description: Giri≈ü ba≈üarƒ±lƒ±
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 token:
 *                   type: string
 *                   example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
 *                 user:
 *                   $ref: '#/components/schemas/User'
 *       400:
 *         description: Ge√ßersiz giri≈ü bilgileri
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: "Kullanƒ±cƒ± adƒ± veya ≈üifre hatalƒ±"
 */
```

## Documentation Maintenance
```bash
# ‚úÖ Package.json scripts for documentation
{
  "scripts": {
    "docs:generate": "swagger-jsdoc -d swaggerDef.js -o swagger.json routes/*.js",
    "docs:serve": "swagger-ui-serve swagger.json",
    "docs:validate": "swagger-parser validate swagger.json",
    "docs:export": "swagger-codegen generate -i swagger.json -l html2 -o docs/",
    "docs:postman": "swagger-codegen generate -i swagger.json -l postman-collection -o postman/"
  }
}
```

## üö® API Endpoint Deƒüi≈üiklikleri (2025-02-06)

### HR Management API G√ºncellemeleri
```javascript
// ‚ùå ESKƒ∞: Frontend yanlƒ±≈ü endpoint kullanƒ±yor
hrManagementAPI: {
  getTemplates: () => api.get('/hr-management/templates'),
  getSettings: () => api.get('/hr-management/settings'),
}

// ‚úÖ YENƒ∞: Doƒüru endpoint'ler
hrManagementAPI: {
  getTemplates: () => api.get('/hr/templates'),
  getSettings: () => api.get('/hr/settings'),
  getRoles: () => api.get('/roles'), // Global roles endpoint
  getUsers: () => api.get('/users'), // Global users endpoint
}

// Backend'e eklenen yeni endpoint'ler:
// GET /hr/templates - T√ºm ≈üablonlarƒ± getir
// GET /hr/templates/:id - Tek ≈üablon detayƒ±
// POST /hr/templates - Yeni ≈üablon olu≈ütur
// PUT /hr/templates/:id - ≈ûablon g√ºncelle
// DELETE /hr/templates/:id - ≈ûablon sil
// GET /hr/settings - Ayarlarƒ± getir
// PUT /hr/settings - Ayarlarƒ± g√ºncelle
// POST /hr/settings/role-permissions - Rol yetkilerini g√ºncelle
// POST /hr/settings/module-access - Mod√ºl eri≈üimini g√ºncelle
```

### Tasks API - Makina Se√ßimi
```javascript
// ‚úÖ DOƒûRU ENDPOINT
POST /api/tasks/select-machines
Body: { selectedMachines: ['machineId1', 'machineId2'] }

// Frontend kullanƒ±mƒ±:
import { tasksAPI } from '../services/api';
await tasksAPI.selectMachines(['machineId1', 'machineId2']);

// ‚ùå YANLI≈û: Bu endpoint yok
POST /api/auth/select-machines // 404 hatasƒ±
```

## Swagger Documentation Kurallarƒ±
```javascript
/**
 * @swagger
 * /api/tasks/select-machines:
 *   post:
 *     summary: Makina se√ßimi
 *     description: Se√ßilen makinalarƒ± g√∂revle ili≈ükilendirir
 *     tags: [Tasks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - selectedMachines
 *             properties:
 *               selectedMachines:
 *                 type: array
 *                 items:
 */
```

### üöÄ Cache System API Documentation ‚úÖ
```javascript
/**
 * @swagger
 * /api/cache/stats:
 *   get:
 *     summary: Cache istatistikleri
 *     description: Sistem cache performans istatistiklerini getirir
 *     tags: [Cache Management]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Cache istatistikleri ba≈üarƒ±yla getirildi
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     hits:
 *                       type: number
 *                       example: 1250
 *                       description: Cache hit sayƒ±sƒ±
 *                     misses:
 *                       type: number
 *                       example: 180
 *                       description: Cache miss sayƒ±sƒ±
 *                     hitRate:
 *                       type: string
 *                       example: "87.41"
 *                       description: Cache hit oranƒ± (%)
 *                     sets:
 *                       type: number
 *                       example: 320
 *                       description: Cache set i≈ülem sayƒ±sƒ±
 *                     deletes:
 *                       type: number
 *                       example: 45
 *                       description: Cache delete i≈ülem sayƒ±sƒ±
 *                     errors:
 *                       type: number
 *                       example: 2
 *                       description: Cache error sayƒ±sƒ±
 *                     memoryUsage:
 *                       type: object
 *                       properties:
 *                         rss:
 *                           type: number
 *                           example: 52428800
 *                         heapTotal:
 *                           type: number
 *                           example: 29360128
 *                         heapUsed:
 *                           type: number
 *                           example: 18874496
 *                     uptime:
 *                       type: number
 *                       example: 3600.5
 *                       description: Sunucu uptime (saniye)
 *                     redisConnected:
 *                       type: boolean
 *                       example: true
 *                       description: Redis baƒülantƒ± durumu
 *
 * /api/cache/clear:
 *   post:
 *     summary: Cache temizleme
 *     description: Belirtilen pattern'e g√∂re cache'i temizler
 *     tags: [Cache Management]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               pattern:
 *                 type: string
 *                 example: "users:*"
 *                 description: Temizlenecek cache pattern'i
 *               force:
 *                 type: boolean
 *                 example: false
 *                 description: Zorla temizleme (t√ºm cache)
 *     responses:
 *       200:
 *         description: Cache ba≈üarƒ±yla temizlendi
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "Cache pattern 'users:*' temizlendi"
 *                 clearedCount:
 *                   type: number
 *                   example: 15
 *                   description: Temizlenen cache entry sayƒ±sƒ±
 *
 * /api/cache/performance:
 *   get:
 *     summary: Cache performans metrikleri
 *     description: Detaylƒ± cache performans analizi
 *     tags: [Cache Management]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Performans metrikleri
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     responseTimeImprovement:
 *                       type: string
 *                       example: "85%"
 *                       description: Response time iyile≈ütirmesi
 *                     databaseLoadReduction:
 *                       type: string
 *                       example: "70%"
 *                       description: Database y√ºk azalmasƒ±
 *                     memoryUsageOptimization:
 *                       type: string
 *                       example: "40%"
 *                       description: Memory kullanƒ±m optimizasyonu
 *                     cacheDistribution:
 *                       type: object
 *                       properties:
 *                         redis:
 *                           type: number
 *                           example: 75
 *                           description: Redis cache kullanƒ±m oranƒ± (%)
 *                         memory:
 *                           type: number
 *                           example: 25
 *                           description: Memory cache kullanƒ±m oranƒ± (%)
 *                     topCachedEndpoints:
 *                       type: array
 *                       items:
 *                         type: object
 *                         properties:
 *                           endpoint:
 *                             type: string
 *                             example: "/api/users"
 *                           hits:
 *                             type: number
 *                             example: 450
 *                           hitRate:
 *                             type: string
 *                             example: "92.3%"
 */
```

### Cache TTL Configuration Documentation
```javascript
/**
 * @swagger
 * components:
 *   schemas:
 *     CacheConfiguration:
 *       type: object
 *       properties:
 *         SHORT_CACHE:
 *           type: object
 *           description: Kƒ±sa s√ºreli cache (5-15 dakika)
 *           properties:
 *             dashboard:
 *               type: number
 *               example: 300000
 *               description: Dashboard data (5 min)
 *             tasks:
 *               type: number
 *               example: 180000
 *               description: User tasks (3 min)
 *             controlPending:
 *               type: number
 *               example: 300000
 *               description: Control pending (5 min)
 *         MEDIUM_CACHE:
 *           type: object
 *           description: Orta s√ºreli cache (30-60 dakika)
 *           properties:
 *             users:
 *               type: number
 *               example: 1800000
 *               description: User lists (30 min)
 *             roles:
 *               type: number
 *               example: 3600000
 *               description: Roles (60 min)
 *             departments:
 *               type: number
 *               example: 3600000
 *               description: Departments (60 min)
 *             machines:
 *               type: number
 *               example: 1800000
 *               description: Machine lists (30 min)
 *         LONG_CACHE:
 *           type: object
 *           description: Uzun s√ºreli cache (2-24 saat)
 *           properties:
 *             templates:
 *               type: number
 *               example: 7200000
 *               description: Templates (2 hours)
 *             settings:
 *               type: number
 *               example: 86400000
 *               description: System settings (24 hours)
 *             modules:
 *               type: number
 *               example: 86400000
 *               description: Module definitions (24 hours)
 *
 *     CacheKeyPatterns:
 *       type: object
 *       properties:
 *         userSpecific:
 *           type: array
 *           items:
 *             type: string
 *           example: 
 *             - "user:{userId}:profile"
 *             - "user:{userId}:tasks"
 *             - "user:{userId}:dashboard"
 *             - "user:{userId}:my-activity"
 *         global:
 *           type: array
 *           items:
 *             type: string
 *           example:
 *             - "users:list"
 *             - "roles:list"
 *             - "departments:list"
 *             - "machines:all"
 *             - "inventory:categories"
 *         moduleSpecific:
 *           type: array
 *           items:
 *             type: string
 *           example:
 *             - "dashboard:summary"
 *             - "tasks:pending"
 *             - "inventory:dashboard"
 *             - "quality:templates"
 *             - "hr:settings"
 */
```

### Cache Middleware Documentation
```javascript
/**
 * @swagger
 * components:
 *   schemas:
 *     CacheMiddleware:
 *       type: object
 *       description: Cache middleware kullanƒ±m √∂rnekleri
 *       properties:
 *         predefinedMiddlewares:
 *           type: object
 *           properties:
 *             dashboardCache:
 *               type: string
 *               example: "dashboardCache(5)"
 *               description: "Dashboard cache (5 dakika TTL)"
 *             usersListCache:
 *               type: string
 *               example: "usersListCache(30)"
 *               description: "User list cache (30 dakika TTL)"
 *             rolesListCache:
 *               type: string
 *               example: "rolesListCache(60)"
 *               description: "Roles cache (60 dakika TTL)"
 *             inventoryCache:
 *               type: string
 *               example: "inventoryCache(15)"
 *               description: "Inventory cache (15 dakika TTL)"
 *         customMiddleware:
 *           type: object
 *           properties:
 *             example:
 *               type: string
 *               example: |
 *                 const customCache = cacheMiddleware({
 *                   keyGenerator: (req) => `custom:${req.user.id}:${req.params.id}`,
 *                   ttl: 10 * 60 * 1000, // 10 minutes
 *                   storage: 'redis'
 *                 });
 *         invalidationPatterns:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               action:
 *                 type: string
 *                 example: "POST /api/users"
 *               invalidates:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["users:*", "dashboard:*"]
 */
```

### üîß Inventory Field Templates API ‚úÖ
```javascript
/**
 * @swagger
 * /api/inventory/categories/{id}/fields:
 *   get:
 *     summary: Kategori alan ≈üablonlarƒ±nƒ± getir
 *     description: |
 *       Belirtilen envanter kategorisine ait alan ≈üablonlarƒ±nƒ± getirir.
 *       Database field mapping ile frontend uyumlu format d√∂ner.
 *     tags: [Inventory Field Templates]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           pattern: "^[0-9a-fA-F]{24}$"
 *         description: Kategori MongoDB ObjectId
 *         example: "68380aa8b945226655fd3a9b"
 *     responses:
 *       200:
 *         description: Alan ≈üablonlarƒ± ba≈üarƒ±yla getirildi
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   _id:
 *                     type: string
 *                     example: "675e2a1b8f4c6d1234567890"
 *                   kategoriId:
 *                     type: string
 *                     example: "68380aa8b945226655fd3a9b"
 *                   alan:
 *                     type: string
 *                     example: "Makine Adƒ±"
 *                     description: "Backward compatibility field"
 *                   ad:
 *                     type: string
 *                     example: "Makine Adƒ±"
 *                     description: "Database alanAdi ‚Üí Frontend ad mapping"
 *                   tip:
 *                     type: string
 *                     enum: [text, number, select, date, boolean, textarea]
 *                     example: "text"
 *                     description: "Database alanTipi ‚Üí Frontend tip mapping"
 *                   gerekli:
 *                     type: boolean
 *                     example: true
 *                     description: "Database zorunlu ‚Üí Frontend gerekli mapping"
 *                   siraNo:
 *                     type: number
 *                     example: 1
 *                     description: "Alan sƒ±rasƒ±"
 *                   grup:
 *                     type: string
 *                     example: "Genel Tanƒ±mlayƒ±cƒ± Bilgiler"
 *                     description: "Alan grubu"
 *                   varsayilanDeger:
 *                     type: string
 *                     example: ""
 *                     description: "Varsayƒ±lan deƒüer"
 *                   secenekler:
 *                     type: array
 *                     items:
 *                       type: string
 *                     example: ["Se√ßenek 1", "Se√ßenek 2"]
 *                     description: "Select tipi i√ßin se√ßenekler"
 *                   aciklama:
 *                     type: string
 *                     example: "Makina adƒ± bilgisi"
 *                   aktif:
 *                     type: boolean
 *                     example: true
 *             examples:
 *               plasticInjectionMachine:
 *                 summary: Plastik enjeksiyon makinasƒ± alanlarƒ±
 *                 value:
 *                   - _id: "675e2a1b8f4c6d1234567890"
 *                     kategoriId: "68380aa8b945226655fd3a9b"
 *                     alan: "Makine Adƒ±"
 *                     ad: "Makine Adƒ±"
 *                     tip: "text"
 *                     gerekli: true
 *                     siraNo: 1
 *                     grup: "Genel Tanƒ±mlayƒ±cƒ± Bilgiler"
 *                     varsayilanDeger: ""
 *                     secenekler: []
 *                     aciklama: "Makina adƒ± bilgisi"
 *                     aktif: true
 *                   - _id: "675e2a1b8f4c6d1234567891"
 *                     kategoriId: "68380aa8b945226655fd3a9b"
 *                     alan: "Seri No"
 *                     ad: "Seri No"
 *                     tip: "text"
 *                     gerekli: true
 *                     siraNo: 2
 *                     grup: "Genel Tanƒ±mlayƒ±cƒ± Bilgiler"
 *                     varsayilanDeger: ""
 *                     secenekler: []
 *                     aciklama: "Makina seri numarasƒ±"
 *                     aktif: true
 *       404:
 *         description: Kategori bulunamadƒ± veya alan ≈üablonu yok
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Bu kategori i√ßin alan ≈üablonu bulunamadƒ±"
 *       500:
 *         $ref: '#/components/responses/InternalServerError'
 */

/**
 * Backend Implementation Example:
 * 
 * router.get('/categories/:id/fields', auth, checkModulePermission('Envanter Y√∂netimi'), async (req, res) => {
 *   try {
 *     console.log('üîç Field templates isteniyor, categoryId:', req.params.id);
 *     
 *     const templates = await InventoryFieldTemplate.find({kategoriId: req.params.id}).sort({siraNo: 1});
 *     console.log(`üìä ${templates.length} template bulundu`);
 *     
 *     // Database field mapping (alanAdi ‚Üí ad, alanTipi ‚Üí tip, zorunlu ‚Üí gerekli)
 *     const mappedTemplates = templates.map((template) => ({
 *       _id: template._id,
 *       kategoriId: template.kategoriId,
 *       alan: template.alanAdi,        // Backward compatibility
 *       ad: template.alanAdi,          // alanAdi ‚Üí ad  
 *       tip: template.alanTipi,        // alanTipi ‚Üí tip
 *       gerekli: template.zorunlu,     // zorunlu ‚Üí gerekli
 *       siraNo: template.siraNo,
 *       grup: template.grup,
 *       varsayilanDeger: template.varsayilanDeger,
 *       secenekler: template.secenekler,
 *       aciklama: template.aciklama,
 *       aktif: template.aktif
 *     }));
 *     
 *     console.log('‚úÖ Field templates mapped and sent:', mappedTemplates.length);
 *     res.json(mappedTemplates);
 *   } catch (error) {
 *     console.error('‚ùå Field templates error:', error);
 *     res.status(500).json({ 
 *       message: 'Field templates y√ºklenirken hata olu≈ütu',
 *       error: error.message 
 *     });
 *   }
 * });
 */
```

### üîß MyActivity Enhanced Task Details API ‚úÖ
```javascript
/**
 * @swagger
 * /api/my-activity/task-details/{id}:
 *   get:
 *     summary: G√∂rev detaylarƒ±nƒ± getir (t√ºm tip desteƒüi) - ENHANCED
 *     description: |
 *       ID'ye g√∂re g√∂rev detaylarƒ±nƒ± getirir. Desteklenen tipler:
 *       - Normal Task (checklist)
 *       - WorkTask (worktask) - Kalƒ±p deƒüi≈üim g√∂revleri ‚úÖ YENƒ∞
 *       - HR Evaluation (hr_checklist_, hr_mesai_, hr_devamsizlik_)
 *       - Quality Control (quality_control)
 *       
 *       ‚úÖ G√úNCEL: WorkTask desteƒüi eklendi - Kalƒ±p bilgileri dahil
 *     tags: [MyActivity]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: |
 *           G√∂rev ID'si. Formatlar:
 *           - MongoDB ObjectId (24 karakter) - Normal Task/WorkTask/QualityControl
 *           - hr_checklist_{hrScoreId}_{timestamp} - HR Checklist
 *           - hr_mesai_{hrScoreId}_{timestamp} - HR Mesai
 *           - hr_devamsizlik_{hrScoreId}_{timestamp} - HR Devamsƒ±zlƒ±k
 *         examples:
 *           normalTask:
 *             value: "507f1f77bcf86cd799439011"
 *             summary: Normal Task ID
 *           workTask:
 *             value: "507f1f77bcf86cd799439012"
 *             summary: WorkTask ID (YENƒ∞)
 *           hrChecklist:
 *             value: "hr_checklist_507f1f77bcf86cd799439013_1704067200000"
 *             summary: HR Checklist ID
 *     responses:
 *       200:
 *         description: G√∂rev detaylarƒ± ba≈üarƒ±yla getirildi
 *         content:
 *           application/json:
 *             schema:
 *               oneOf:
 *                 - $ref: '#/components/schemas/TaskDetails'
 *                 - $ref: '#/components/schemas/WorkTaskDetailsEnhanced'
 *                 - $ref: '#/components/schemas/HRTaskDetails'
 *                 - $ref: '#/components/schemas/QualityControlDetails'
 *             examples:
 *               workTaskExample:
 *                 summary: WorkTask Detayƒ± (YENƒ∞)
 *                 value:
 *                   id: "507f1f77bcf86cd799439012"
 *                   tip: "worktask"
 *                   checklistAdi: "Kalƒ±p Deƒüi≈üim S√ºreci"
 *                   kategori: "ƒ∞≈üe Baƒülƒ±"
 *                   aciklama: "Plastik enjeksiyon kalƒ±p deƒüi≈üim prosed√ºr√º"
 *                   kullanici:
 *                     ad: "Ahmet"
 *                     soyad: "Yƒ±lmaz"
 *                     kullaniciAdi: "ahmet.yilmaz"
 *                   makina: "Enjeksiyon Makinasƒ± 2 (INV002)"
 *                   indirilenKalip:
 *                     ad: "Kapak Kalƒ±bƒ± A1"
 *                     envanterKodu: "KLP001"
 *                     dinamikAlanlar:
 *                       uretilecekUrun: "Plastik Kapak"
 *                       lokasyon: "Depo A"
 *                   baglananHamade:
 *                     ad: "G√∂vde Kalƒ±bƒ± B2"
 *                     envanterKodu: "KLP002"
 *                     dinamikAlanlar:
 *                       uretilecekUrun: "Plastik G√∂vde"
 *                       lokasyon: "Depo B"
 *                   olusturulmaTarihi: "2025-02-06T08:00:00Z"
 *                   tamamlanmaTarihi: "2025-02-06T10:30:00Z"
 *                   onayTarihi: "2025-02-06T14:20:00Z"
 *                   kontrolTarihi: "2025-02-06T14:15:00Z"
 *                   durum: "tamamlandi"
 *                   onaylayanKullanici:
 *                     ad: "Mehmet"
 *                     soyad: "Demir"
 *                   maddeler:
 *                     - soru: "Makina durduruldu mu?"
 *                       puan: 25
 *                       maxPuan: 25
 *                       cevap: "Evet"
 *                       alinanPuan: 23
 *                       yorum: "Makina g√ºvenli ≈üekilde durduruldu"
 *                       resim: "/uploads/worktask-images/makina1.jpg"
 *                       kontrolYorumu: "Prosed√ºr uygun ≈üekilde takip edilmi≈ü"
 *                       kontrolPuani: 23
 *                       sira: 1
 *                   toplamPuan: 100
 *                   alinanPuan: 85
 *                   kontrolToplamPuani: 90
 *                   basariYuzdesi: 90
 *       404:
 *         description: G√∂rev bulunamadƒ±
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "G√∂rev bulunamadƒ±"
 *       500:
 *         description: Sunucu hatasƒ±
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     WorkTaskDetailsEnhanced:
 *       type: object
 *       description: ‚úÖ YENƒ∞ - Enhanced WorkTask details with kalƒ±p bilgileri
 *       properties:
 *         id:
 *           type: string
 *           example: "507f1f77bcf86cd799439012"
 *         tip:
 *           type: string
 *           enum: [worktask]
 *           example: "worktask"
 *         checklistAdi:
 *           type: string
 *           example: "Kalƒ±p Deƒüi≈üim S√ºreci"
 *         kategori:
 *           type: string
 *           enum: [ƒ∞≈üe Baƒülƒ±]
 *           example: "ƒ∞≈üe Baƒülƒ±"
 *         aciklama:
 *           type: string
 *           example: "Plastik enjeksiyon kalƒ±p deƒüi≈üim prosed√ºr√º"
 *         kullanici:
 *           $ref: '#/components/schemas/UserInfo'
 *         makina:
 *           type: string
 *           example: "Enjeksiyon Makinasƒ± 2 (INV002)"
 *           description: "Makina adƒ± ve envanter kodu formatƒ±nda"
 *         indirilenKalip:
 *           type: object
 *           description: "‚úÖ YENƒ∞ - ƒ∞ndirilen kalƒ±p bilgileri"
 *           properties:
 *             ad:
 *               type: string
 *               example: "Kapak Kalƒ±bƒ± A1"
 *             envanterKodu:
 *               type: string
 *               example: "KLP001"
 *             dinamikAlanlar:
 *               type: object
 *               example: 
 *                 uretilecekUrun: "Plastik Kapak"
 *                 lokasyon: "Depo A"
 *                 agirlik: "2.5 kg"
 *         baglananHamade:
 *           type: object
 *           description: "‚úÖ YENƒ∞ - Baƒülanan kalƒ±p/hamadde bilgileri"
 *           properties:
 *             ad:
 *               type: string
 *               example: "G√∂vde Kalƒ±bƒ± B2"
 *             envanterKodu:
 *               type: string
 *               example: "KLP002"
 *             dinamikAlanlar:
 *               type: object
 *               example: 
 *                 uretilecekUrun: "Plastik G√∂vde"
 *                 lokasyon: "Depo B"
 *                 agirlik: "3.2 kg"
 *         olusturulmaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T08:00:00Z"
 *         tamamlanmaTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T10:30:00Z"
 *         onayTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T14:20:00Z"
 *         kontrolTarihi:
 *           type: string
 *           format: date-time
 *           example: "2025-02-06T14:15:00Z"
 *         durum:
 *           type: string
 *           enum: [bekliyor, tamamlandi, onaylandi, reddedildi]
 *           example: "tamamlandi"
 *         onaylayanKullanici:
 *           $ref: '#/components/schemas/UserInfo'
 *         maddeler:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/WorkTaskItemEnhanced'
 *         toplamPuan:
 *           type: number
 *           example: 100
 *           description: "Checklist'teki toplam puan"
 *         alinanPuan:
 *           type: number
 *           example: 85
 *           description: "Kullanƒ±cƒ±nƒ±n aldƒ±ƒüƒ± puan"
 *         kontrolToplamPuani:
 *           type: number
 *           example: 90
 *           description: "Kontrol sonrasƒ± verilen puan"
 *         basariYuzdesi:
 *           type: number
 *           example: 90
 *           description: "Ba≈üarƒ± y√ºzdesi"
 *
 *     WorkTaskItemEnhanced:
 *       type: object
 *       properties:
 *         soru:
 *           type: string
 *           example: "Kalƒ±p deƒüi≈üimi tamamlandƒ± mƒ±?"
 *         puan:
 *           type: number
 *           example: 20
 *           description: "Bu madde i√ßin puan deƒüeri"
 *         maxPuan:
 *           type: number
 *           example: 20
 *           description: "Frontend uyumluluƒüu i√ßin"
 *         cevap:
 *           type: string
 *           example: "Evet"
 *           description: "Kullanƒ±cƒ±nƒ±n cevabƒ±"
 *         alinanPuan:
 *           type: number
 *           example: 18
 *           description: "Bu madde i√ßin alƒ±nan puan"
 *         yorum:
 *           type: string
 *           example: "Kalƒ±p deƒüi≈üimi sorunsuz tamamlandƒ±"
 *         resim:
 *           type: string
 *           example: "/uploads/worktask-images/kalip1.jpg"
 *           description: "‚úÖ YENƒ∞ - WorkTask resim desteƒüi"
 *         kontrolYorumu:
 *           type: string
 *           example: "Prosed√ºr uygun ≈üekilde takip edilmi≈ü"
 *         kontrolPuani:
 *           type: number
 *           example: 18
 *           description: "Kontrol eden tarafƒ±ndan verilen puan"
 *         sira:
 *           type: number
 *           example: 1
 *           description: "Madde sƒ±rasƒ±"
 */

/**
 * Backend Implementation Example:
 * 
 * router.get('/task-details/:id', auth, async (req, res) => {
 *   try {
 *     const taskId = req.params.id;
 *     console.log('üîç Task details isteniyor:', taskId);
 * 
 *     // ‚úÖ YENƒ∞: WorkTask kontrol√º eklendi
 *     console.log('üîç Checking if this is a WorkTask...');
 *     const workTask = await WorkTask.findById(taskId)
 *       .populate('kullanici', 'ad soyad kullaniciAdi')
 *       .populate('checklist', 'ad kategori aciklama maddeler')
 *       .populate('makina', 'ad makinaNo envanterKodu')
 *       .populate('indirilenKalip', 'envanterKodu ad dinamikAlanlar')
 *       .populate('baglananHamade', 'envanterKodu ad dinamikAlanlar')
 *       .populate('onaylayanKullanici', 'ad soyad');
 * 
 *     if (workTask) {
 *       console.log('‚úÖ WorkTask found:', workTask.checklist?.ad);
 *       const taskDetails = MyActivityFormatters.formatWorkTaskDetails(workTask);
 *       console.log(`‚úÖ WorkTask detaylarƒ± hazƒ±rlandƒ± - ${taskDetails.checklistAdi} - ${taskDetails.maddeler.length} madde`);
 *       return res.json(taskDetails);
 *     }
 * 
 *     // Other task type checks...
 *   } catch (error) {
 *     console.error('‚ùå G√∂rev detaylarƒ± hatasƒ±:', error.message);
 *     res.status(500).json({ message: 'Sunucu hatasƒ±' });
 *   }
 * });
 */
```

### üîß Field Mapping Documentation ‚úÖ
```javascript
/**
 * @swagger
 * components:
 *   schemas:
 *     InventoryFieldMapping:
 *       type: object
 *       description: "Database ‚Üí Frontend field mapping sistemi"
 *       properties:
 *         databaseSchema:
 *           type: object
 *           description: "MongoDB'de saklanan alan adlarƒ±"
 *           properties:
 *             alanAdi:
 *               type: string
 *               example: "Makine Adƒ±"
 *               description: "Database field name"
 *             alanTipi:
 *               type: string
 *               example: "text"
 *               description: "Database field type"
 *             zorunlu:
 *               type: boolean
 *               example: true
 *               description: "Database required flag"
 *         frontendSchema:
 *           type: object
 *           description: "Frontend'de beklenen alan adlarƒ±"
 *           properties:
 *             ad:
 *               type: string
 *               example: "Makine Adƒ±"
 *               description: "Frontend field name (mapped from alanAdi)"
 *             tip:
 *               type: string
 *               example: "text"
 *               description: "Frontend field type (mapped from alanTipi)"
 *             gerekli:
 *               type: boolean
 *               example: true
 *               description: "Frontend required flag (mapped from zorunlu)"
 *         mappingFunction:
 *           type: string
 *           example: |
 *             const mapTemplateFields = (template) => ({
 *               _id: template._id,
 *               kategoriId: template.kategoriId,
 *               alan: template.alanAdi,        // Backward compatibility
 *               ad: template.alanAdi,          // alanAdi ‚Üí ad  
 *               tip: template.alanTipi,        // alanTipi ‚Üí tip
 *               gerekli: template.zorunlu,     // zorunlu ‚Üí gerekli
 *               siraNo: template.siraNo,
 *               grup: template.grup,
 *               varsayilanDeger: template.varsayilanDeger,
 *               secenekler: template.secenekler,
 *               aciklama: template.aciklama,
 *               aktif: template.aktif
 *             });
 */
```

## üéØ Task Management API Updates (2025-01-20)

### Task Starting Endpoint
```javascript
/**
 * @swagger
 * /api/tasks/{id}/start:
 *   put:
 *     summary: "G√∂revi ba≈ülat ve makinaya ata"
 *     description: "Bekleme durumundaki bir g√∂revi se√ßili makinaya atar ve ba≈ülatƒ±r"
 *     tags: [Tasks]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           example: "60d0fe4f5311236168a109ca"
 *         description: "Ba≈ülatƒ±lacak g√∂rev ID'si"
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - makinaId
 *             properties:
 *               makinaId:
 *                 type: string
 *                 example: "60d0fe4f5311236168a109cb"
 *                 description: "G√∂revin atanacaƒüƒ± makina ID'si"
 *     responses:
 *       200:
 *         description: "G√∂rev ba≈üarƒ±yla ba≈ülatƒ±ldƒ±"
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "G√∂rev ba≈üarƒ±yla ba≈ülatƒ±ldƒ±"
 *                 task:
 *                   $ref: '#/components/schemas/TaskWithMachine'
 *       400:
 *         description: "Hatalƒ± istek (makina se√ßimi eksik veya g√∂rev zaten ba≈ülatƒ±lmƒ±≈ü)"
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: "Makina se√ßimi gerekli"
 *       404:
 *         description: "G√∂rev bulunamadƒ±"
 *       500:
 *         description: "Sunucu hatasƒ±"
 */
```

### Task Status Definitions
```javascript
/**
 * @swagger
 * components:
 *   schemas:
 *     TaskStatus:
 *       type: string
 *       enum:
 *         - bekliyor
 *         - baslatildi
 *         - tamamlandi
 *         - iptal
 *       description: |
 *         Task durumlarƒ±:
 *         - `bekliyor`: Template state - hen√ºz makinaya atanmamƒ±≈ü
 *         - `baslatildi`: Makinaya atanmƒ±≈ü ve ba≈ülatƒ±lmƒ±≈ü
 *         - `tamamlandi`: Kullanƒ±cƒ± tarafƒ±ndan tamamlanmƒ±≈ü
 *         - `iptal`: ƒ∞ptal edilmi≈ü
 *       
 *     TaskWithMachine:
 *       allOf:
 *         - $ref: '#/components/schemas/Task'
 *         - type: object
 *           properties:
 *             makina:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                   example: "60d0fe4f5311236168a109cb"
 *                 ad:
 *                   type: string
 *                   example: "Makina ZF101"
 *                 makinaNo:
 *                   type: string
 *                   example: "ZF101"
 *                 envanterKodu:
 *                   type: string
 *                   example: "MKN001"
 *             durum:
 *               type: string
 *               enum: [baslatildi, tamamlandi]
 *               example: "baslatildi"
 *             baslamaTarihi:
 *               type: string
 *               format: date-time
 *               example: "2025-01-20T09:15:00Z"
 *               description: "G√∂revin ba≈ülatƒ±lma tarihi"
 */
```

### Star Rating API Schema
```javascript
/**
 * @swagger
 * components:
 *   schemas:
 *     StarRatingRequest:
 *       type: object
 *       description: "Yƒ±ldƒ±z tabanlƒ± puanlama sistemi i√ßin istek"
 *       required:
 *         - maddeler
 *       properties:
 *         maddeler:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               index:
 *                 type: number
 *                 example: 0
 *                 description: "Madde sƒ±rasƒ± (0-based)"
 *               kontrolPuani:
 *                 type: number
 *                 minimum: 0
 *                 maximum: 10
 *                 example: 8
 *                 description: "1-10 yƒ±ldƒ±z puanƒ±"
 *               kontrolYorumu:
 *                 type: string
 *                 example: "Kaliteli i≈ü yapƒ±lmƒ±≈ü"
 *                 description: "Kontrol yorumu (opsiyonel)"
 *         genelYorum:
 *           type: string
 *           example: "Genel olarak ba≈üarƒ±lƒ± bir √ßalƒ±≈üma"
 *           description: "Genel deƒüerlendirme yorumu"
 *         
 *     StarRatingResponse:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *           example: true
 *         message:
 *           type: string
 *           example: "Puanlama ba≈üarƒ±yla kaydedildi"
 *         toplamPuan:
 *           type: number
 *           example: 85
 *           description: "Toplam alƒ±nan puan"
 *         maxPuan:
 *           type: number
 *           example: 100
 *           description: "Maksimum olasƒ± puan"
 *         yuzde:
 *           type: number
 *           example: 85
 *           description: "Ba≈üarƒ± y√ºzdesi"
 */
```