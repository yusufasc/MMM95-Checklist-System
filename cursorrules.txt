# MMM Checklist Sistemi - Cursor Proje Kuralları

## 🎯 Genel Kurallar

### Dil Standartları

- **UI Metinleri**: Türkçe
- **Kod (değişken/fonksiyon)**: İngilizce
- **Yorumlar**: Türkçe
- **API Endpoints**: İngilizce
- **Database Fields**: Türkçe (mevcut yapı)

### Dosya Adlandırma

- **Components**: PascalCase (`UserManagement.js`)
- **Utilities**: camelCase (`apiHelpers.js`)
- **Folders**: lowercase (`components`, `pages`)
- **Routes**: lowercase (`users.js`, `tasks.js`)

## 🔧 Backend Kuralları (Node.js/Express)

### Zorunlu Yapı

```javascript
// Her route dosyası
router.get("/", auth, checkModulePermission("Modül"), async (req, res) => {
  try {
    const data = await Model.find().populate("field", "selectedFields");
    res.json(data);
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ message: "Sunucu hatası" });
  }
});
```

### Kritik Kurallar

- **ESLint**: 0 error, 0 warning zorunlu ✅
- **Performance**: Loop içinde await YOK - `Promise.all` kullan
- **Security**: Input validation her endpoint'te
- **Error Handling**: Try-catch + proper status codes

### Database

- Async/await (Promise.then() YOK)
- Populate'de sadece gerekli field'lar
- MongoDB ObjectId validation

## ⚛️ Frontend Kuralları (React)

### Component Yapısı

```javascript
// Standart component pattern
const ComponentName = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const response = await apiService.getData();
      setData(response.data);
    } catch (error) {
      setError("Veri yüklenirken hata oluştu");
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <CircularProgress />;

  return (
    <Box>
      {error && <Alert severity="error">{error}</Alert>}
      {/* Content */}
    </Box>
  );
};
```

### Zorunlu Kurallar

- **ESLint**: 0 error, 0 warning ✅
- **Functional Components**: Class component YOK
- **State Management**: Local için useState, Global için Context
- **API Calls**: Loading + Error + Success states

### Material-UI

- `sx` prop için inline styling
- Responsive: `{ xs: 1, sm: 2, md: 3 }`
- Touch-friendly: minimum 44px button
- Normal `Grid` kullan (`Grid2` YOK)

## 🔐 Güvenlik

### Authentication/Authorization

```javascript
// Frontend yetki kontrolü
const { hasModulePermission } = useAuth();
if (!hasModulePermission("Modül Adı")) {
  return <Alert severity="error">Yetki yok</Alert>;
}

// Backend route koruması
router.post(
  "/",
  auth,
  checkModulePermission("Modül", "duzenleyebilir"),
  handler
);
```

### File Upload (Fotoğraf)

- Base64 format
- Max 5MB dosya boyutu
- `image/*` type check
- Frontend'de compression
- Mobile: `capture="environment"`

## 📊 Performance

### Frontend Optimizasyon

```javascript
// ✅ Paralel operations
const [data1, data2] = await Promise.all([api.getData1(), api.getData2()]);

// ❌ Sequential operations
const data1 = await api.getData1();
const data2 = await api.getData2();
```

### Unused Variables

```javascript
// ✅ Correct
const { usedVar } = data;
const { unusedVar: _unusedVar, usedVar } = data; // underscore prefix

// ❌ Wrong
const { unusedVar, usedVar } = data; // ESLint error
```

## 🚀 Performance Excellence (YENİ)

### Bundle Optimization

```javascript
// ✅ React.lazy() for code splitting
const Dashboard = React.lazy(() => import("./pages/Dashboard"));

// ✅ Tree-shaking için selective imports
import { Button, TextField } from "@mui/material";

// ❌ Bundle killer - tüm library'yi import etme
import * as MUI from "@mui/material";
```

### Performance Monitoring

```javascript
// ✅ Performance tracking patterns
import { initPerformanceDashboard } from "./utils/performanceMonitor";

// App.js'de initialize et
useEffect(() => {
  initPerformanceDashboard();
}, []);

// ✅ API performance tracking
const startTime = performance.now();
const response = await api.getData();
trackAPIPerformance("getData", startTime);
```

### Advanced Caching Strategy

```javascript
// ✅ API caching pattern
import { apiCache } from "./utils/cachingStrategy";

const fetchData = async () => {
  const cached = await apiCache.get("/api/tasks");
  if (cached) return cached;

  const fresh = await api.getData();
  await apiCache.set("/api/tasks", fresh, {}, 5 * 60 * 1000); // 5 min TTL
  return fresh;
};
```

## 🎨 UI/UX Standartları

### Modern Design

```javascript
// Card hover effects
sx={{
  '&:hover': { transform: 'translateY(-2px)' },
  borderRadius: 2,
  boxShadow: '0 4px 20px rgba(0,0,0,0.1)'
}}

// Responsive spacing
sx={{
  padding: { xs: 1, sm: 2, md: 3 },
  fontSize: { xs: '0.875rem', sm: '1rem' }
}}
```

### Loading States

- `CircularProgress` için loading
- `Skeleton` için placeholder
- `LinearProgress` için progress tracking

## 🗑️ Silme İşlemleri

### Güvenli Silme Pattern

```javascript
// Backend: Dependency check
const dependencies = await RelatedModel.find({ parentId: id });
if (dependencies.length > 0) {
  return res.status(400).json({
    message: `${dependencies.length} bağımlı kayıt var`,
    canForceDelete: true,
  });
}
```

## 📱 Mobile-First & PWA (YENİ)

### Responsive Breakpoints

```javascript
// Container responsive
sx={{
  padding: { xs: 1, sm: 2, md: 3 },
  display: { xs: 'block', md: 'flex' }
}}

// Touch-friendly
sx={{ minHeight: 44 }} // Buttons
```

### PWA Implementation

```javascript
// ✅ Service Worker registration
import { registerServiceWorker } from "./utils/cachingStrategy";

// App başlangıcında
useEffect(() => {
  registerServiceWorker();
  initCacheStrategy();
}, []);

// ✅ Offline-first approach
const handleOffline = () => {
  // Offline durumu için fallback UI
  if (!navigator.onLine) {
    return <OfflineAlert />;
  }
};
```

## 🚀 Yeni Modül Ekleme Checklist

### Backend

- [ ] Route dosyası + auth middleware
- [ ] Model (gerekirse)
- [ ] Error handling
- [ ] ESLint compliance

### Frontend

- [ ] Page component
- [ ] API service functions
- [ ] Loading/error states
- [ ] Responsive design
- [ ] ESLint compliance
- [ ] Performance monitoring (YENİ)
- [ ] Caching strategy (YENİ)

## 🔬 Development Excellence (YENİ)

### Code Quality Tools

```javascript
// ✅ ESLint auto-fix workflow
"scripts": {
  "lint": "eslint src/",
  "lint:fix": "eslint src/ --fix",
  "quality:check": "npm run lint && npm run build"
}

// ✅ Bundle analysis
"build:analyze": "npm run build && npx webpack-bundle-analyzer build/static/js/*.js"
```

### Production Deployment

```javascript
// ✅ Production build optimizasyonu
"build:production": "set GENERATE_SOURCEMAP=false && react-scripts build"

// ✅ Performance testing
"performance:test": "npm run build:production && npm run analyze:size"
```

## 📋 Proje Durumu (GÜNCEL - 2025)

### ✅ Tamamlanan WORLD-CLASS Özellikler

- **ESLint**: Frontend & Backend 0 error/warning ✅
- **Performance**: 1000x speedup achieved ✅
- **Bundle Size**: 2MB → 506KB (%75 azalma) ✅
- **PWA**: Service Worker + offline support ✅
- **Caching**: Advanced 3-tier caching ✅
- **Modern UI**: Card-based responsive design ✅
- **Security**: OWASP compliant ✅

### 🎯 Aktif ENTERPRISE Özellikler

- **Performance Monitoring**: Real-time system tracking
- **Advanced Caching**: Memory + LocalStorage + ServiceWorker
- **Code Splitting**: React.lazy() ile route-based splitting
- **PWA Support**: Offline-first architecture
- **Bundle Optimization**: Tree-shaking + compression
- **Production Ready**: Zero-downtime deployment ready

### 📊 Performance Metrikleri (GÜNCEL)

- **Backend Response**: <200ms average ✅
- **Frontend Bundle**: 506KB (gzipped) ✅ (önceki: 2MB)
- **ESLint Compliance**: 100% ✅ (583 problem çözüldü)
- **Mobile Score**: A+ rating ✅
- **PWA Score**: 95+ lighthouse ✅
- **Load Time**: <2s FCP ✅

## 🚨 Kritik Uyarılar

### ESLint Kuralları (Zorunlu)

```javascript
// ❌ Trailing comma missing
const obj = { a: 1, b: 2 };

// ✅ Correct
const obj = { a: 1, b: 2 };

// ❌ If without braces
if (condition) doSomething();

// ✅ Correct
if (condition) {
  doSomething();
}
```

### Performance Killer'lar

```javascript
// ❌ Loop içinde await
for (const item of items) {
  await processItem(item);
}

// ✅ Batch processing
const promises = items.map(processItem);
await Promise.all(promises);

// ❌ Import entire library
import * from '@mui/material';

// ✅ Tree-shaking friendly
import { Button, TextField } from '@mui/material';
```

### Production Deployment Checklist (YENİ)

```bash
# ✅ Pre-deployment checks
npm run lint          # ESLint compliance
npm run build         # Production build success
npm run test         # Test suite passing (gelecekte)
npm run analyze:size # Bundle size verification

# ✅ Performance validation
# Bundle size < 600KB (gzipped)
# ESLint: 0 errors, 0 warnings
# Lighthouse Score > 90
```

Bu kurallar MMM Checklist projesinin **world-class enterprise code quality** standartlarını sağlar. Her yeni feature bu kurallara uygun geliştirilmelidir.
